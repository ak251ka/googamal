<?php  require_once('eng/main/account.php');  require_once('lib/config.php');  require_once('lib/dbo.php');  require_once('lib/defines.php');  require_once('lib/utility.php');  class Plus  {   protected $_parent;   public function __construct(&$parent)   {    $this->_parent = &$parent;   }   public function AddPlusResource($r)   {    if($this->HaveTalant(RES_TALANT))    {     $arr = array();     $arr[$r] = $this->_parent->$r > $_SERVER['REQUEST_TIME'] ?      $this->_parent->$r + (7 * 24 * ONE_TICK) :       $_SERVER['REQUEST_TIME'] + 7 * 24 * ONE_TICK;     $this->SubTalant(RES_TALANT, $arr);     $this->_parent->SetFields($arr);     $this->UseTalant(RES_TALANT, BUY_RES);    }   }   public function AddPlusBuild()   {    if($this->HaveTalant(BUILD_TALANT))    {     $arr = array();     $arr['pb'] =  ($this->_parent->pb > $_SERVER['REQUEST_TIME']) ?      $this->_parent->pb + (7 * 24 * ONE_TICK)     :      $_SERVER['REQUEST_TIME'] + 7 * 24 * ONE_TICK;     $this->SubTalant(BUILD_TALANT,$arr);     $this->_parent->SetFields($arr);     $this->UseTalant(BUILD_TALANT, BUY_PLUS);    }   }   public function BuyGolden()   {    if($this->_parent->golden)     return;    if($this->HaveTalant(GOLDEN_CLUB))    {     $arr = array('golden' => '1');     $this->SubTalant(GOLDEN_CLUB,$arr);     $this->_parent->SetFields($arr);     $this->UseTalant(GOLDEN_CLUB, BUY_GOLDEN);    }   }   public function ResetHero()   {    if($this->HaveTalant(RESET_HERO))    {     $point = $this->_parent->lvl * 4;     $arr = array('p1'=>'0','p2'=>'0','p3'=>'0','p4'=>'0', 'pow1'=>'0','pow2'=>'0','pow3'=>'0','pow4'=>'0','point' => $point);     $this->SubTalant(RESET_HERO,$arr);     $this->_parent->SetFields($arr);     $this->UseTalant(RESET_HERO, BUY_RESET_HER);    }   }   public function RebirthHero()   {    global $town;    if($this->HaveTalant(REBIRTH_HERO) and $this->_parent->life == 0 and is_null($this->_parent->rebirth))    {     $arr = array();     $arr['life'] = '100';     $this->SubTalant(REBIRTH_HERO, $arr);     $town->AddFields(array('h'=>1, 'used' => 1));     $this->_parent->SetFields($arr);     $this->UseTalant(REBIRTH_HERO, BUY_REBIRTH_H);    }   }   public function BuyExtera()   {    global $town;    if($town->br < $_SERVER['REQUEST_TIME'] and $this->HaveTalant(EXTERA_TALANT) and $town->Lock())    {     $arr = array();     $this->SubTalant(EXTERA_TALANT, $arr);     $this->_parent->SetFields($arr);     $town->ExteraResource();     $this->UseTalant(EXTERA_TALANT,BUY_EXTERA_RES,SPEND);    }    $town->UnLock();   }   public function HaveTalant($tolant)   {    if(($this->_parent->talant + $this->_parent->t_b) >= $tolant)     return true;    return false;   }   public function HaveMoney($money)   {    if(((int)$this->_parent->money + (int)$this->_parent->m_b) >=(int)$money)     return true;    return false;   }   public function HavePlus($kind)   {    return ($this->_parent->$kind >= $_SERVER['REQUEST_TIME']);   }   public function UseMoney($money, $kind, $type = INCOMMING, $id = NULL)   {    global $dbo;    $arr = array();    $arr['pid'] =  ($id? $id : $this->_parent->id);    $arr['cost'] = $money;    $arr['kind'] = $kind;    $arr['subkind'] = '1';    $arr['types'] =  $type;    $arr['modify'] = $_SERVER['REQUEST_TIME'];    $dbo->InsertRow(DB_PERFIX.'plus', $arr);   }   public function UseTalant($talant, $kind,$type = SPEND, $id = NULL)   {    global $dbo;    $arr = array();    $arr['pid'] = ($id? $id : $this->_parent->id);    $arr['cost'] = $talant;    $arr['kind'] = $kind;    $arr['subkind'] = '0';    $arr['types'] = $type;    $arr['modify'] = $_SERVER['REQUEST_TIME'];    $dbo->InsertRow(DB_PERFIX.'plus', $arr);   }   public function ExchengeM($value)   {    global $town;    if(!$town->Lock())     return;    if(!$value or !$this->HaveTalant($value))          {              $town->UnLock();              return;          }      $arr = array();    if($this->_parent->talant >= $value)    {     $arr['talant'] = -$value;     $arr['money'] =  $value * EXCHANGE_M;    }    else    {     $t1 = $value - $this->_parent->talant;     $arr['money'] = $this->_parent->talant * EXCHANGE_M;     $arr['talant'] = -$this->_parent->talant;     $arr['m_b'] = $t1 * EXCHANGE_M;     $arr['t_b'] = -$t1;    }    $this->_parent->SetFields($arr);    $this->UseTalant($value, EXCHANGE_PLUS, SPEND);    $this->UseMoney($value * EXCHANGE_M, EXCHANGE_PLUS, INCOMMING);    $town->UnLock();   }   public function ExchengeT($value)   {    global $town;    if(!$town->Lock())     return;    $value  = (int)floor($value / EXCHANGE_T) * EXCHANGE_T;    $t2 = $value / EXCHANGE_T;    if(!$value or !$this->HaveMoney($value) or $this->_parent->IsLock())          {              $town->UnLock();              return;          }      $arr = array();    if($value <= $this->_parent->money)    {     $arr['money'] = -$value;     $arr['talant'] = $t2;    }    else    {     $t = $value - $this->_parent->money;     $t1 = (int)floor($this->_parent->money / EXCHANGE_T);     $arr['talant'] = $t1;     $arr['money'] = -$this->_parent->money;     $arr['t_b'] = $t2 - $t1;     $arr['m_b'] = -$t;    }    $this->_parent->SetFields($arr);    $this->UseMoney($value, EXCHANGE_PLUS, SPEND);    $this->UseTalant($t2, EXCHANGE_PLUS, INCOMMING);    $town->UnLock();   }   protected function SubMoney($money, &$arr)   {    if($this->_parent->m_b > $money)     $arr['m_b'] = -$money;    else    {     $money -= $this->_parent->m_b;     $arr['m_b'] = -$this->_parent->m_b;     $arr['money'] = -$money;    }   }   protected function SubTalant($talant, &$arr)   {    if($this->_parent->t_b > $talant)     $arr['t_b'] = -$talant;    else    {     $talant -= $this->_parent->t_b;     $arr['t_b'] = -$this->_parent->t_b;     $arr['talant'] = -$talant;    }   }    public function CleanElixir()   {    global $town;    $town->Lock();    if($this->HaveTalant(BUILD_TALANT * 2) and $town->IsLock())    {     $arr = array();     $town->ClearElixir();     $this->SubTalant(BUILD_TALANT * 2,$arr);     $this->UseTalant(BUILD_TALANT * 2,CLEAN_ELIXIR,SPEND);     $this->_parent->SetFields($arr);    }    $town->UnLock();   }   public function FastBuild()   {    global $town;    $town->Lock();    if($this->HaveTalant(RES_TALANT) and $town->IsLock())    {     $arr = array();     $town->FastBuild();     $this->SubTalant(RES_TALANT,$arr);     $this->_parent->SetFields($arr);     $this->UseTalant(RES_TALANT, FAST_BUILD,SPEND);    }    $town->UnLock();   }      public function ExchengeR()      {          $arr = array();          $this->SubTalant(EXTERA_TALANT,$arr);          $this->_parent->SetFields($arr);          $this->UseTalant(EXTERA_TALANT, EXCHANGE_RES, SPEND);      }      public function Merge()      {          $arr = array();          if(!$this->HaveTalant(MERGINGE_TROOP))              return false;          $this->SubTalant(MERGINGE_TROOP,$arr);          $this->_parent->SetFields($arr);          $this->UseTalant(MERGINGE_TROOP, TROOP_MERGE, SPEND);          return true;      }  }  ?>