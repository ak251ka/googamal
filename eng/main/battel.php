<?php  require_once('lib/config.php');  require_once('lib/dbo.php');  require_once('eng/main/account.php');  require_once('eng/main/troop.php');  require_once('lib/defines.php');  class BattelTroop  {   protected $_t;   protected $_u;   protected $_h;   protected $_p;   protected $_r;   protected $_d;   protected $_used;   protected $_hero;      protected $_count;   public function __construct($kind, &$hero = NULL)   {    $this->_h = &$hero;    $this->_used = 0;    $this->_t = array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0,     8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0, 13 => 0, 14 => 0);    $this->_u = array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0,     8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0, 13 => 0, 14 => 0);    $this->_r = array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);    $this->_d =  array(1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0,    8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0, 13 => 0, 14 => 0);    $this->_r[0] = $kind;    $this->_hero = false;          $this->_count = 0;   }   public function Load(&$town)   {    global $troops;    $k = $this->_r[0];          $this->_used = 0;          $this->_count = 0;    for($i = 1; $i < 15;$i++)    {     $u = 'up'.$i;     $t = 't'.$i;              $up = ($i < 12 ? (1 + ($town[$u] * 0.01)) : 1);     $this->_t[$i] = $town[$t];     $this->_u[$i] = $up;     $this->_used += $this->_t[$i] * $troops[$k][$i][8];              $this->_count += $this->_t[$i];    }    $this->_hero = $town['h'];    if($this->_hero)              $this->_used += 1;   }      public function LoadClooney(&$clooney)      {          global $troops;          $this->_used = 0;          $this->_count = 0;          for($i = 1; $i < 15;$i++)          {              $t = 't'.$i;              $this->_t[$i] = $clooney->$t;              $this->_u[$i] = 1;              $this->_used += $this->_t[$i] * $troops[4][$i][8];              $this->_count += $clooney->$t;          }          $this->_hero = 0;      }      public function LoadRow(&$row, &$town)      {          global $troops;          $this->_used = 0;          $k = $this->_r[0];          for($i = 1; $i < 15;$i++)          {              $u = 'up'.$i;              $t = 't'.$i;              $up = ($i < 12 ? (1 + ($town[$u] * 0.01)) : 1);              $this->_t[$i] = $row[$t];              $this->_u[$i] = $up;              $this->_used += $this->_t[$i] * $troops[$k][$i][8];              $this->_count += $this->_t[$i];          }          $this->_hero = $row['h'];          if($this->_hero)              $this->_used += 1;      }   public function AddRow($r)   {    $kind = $this->_r[0];    $this->_used = 0;          $this->_count = 0;    for($i = 1; $i < 15;$i++)    {     $this->_t[$i] += $r[$i];     $this->_used += $this->_t[$i] * $troops[$kind][$i][8];              $this->_count += $this->_t[$i];    }          if($this->_hero)              $this->_used++;   }   public function GetReprot()   {    for($i = 1; $i<15; $i++)    {     $this->_r[$i] = $this->_t[$i];     $this->_r[$i + 15] = ($this->_t[$i] - $this->_d[$i]);    }    $this->_r[15] = $this->_hero ? 1 : 0;    if($this->_r[15])     $this->_r[30] = ($this->_h->life > 1 ? 1 : 0);    return $this->_r;   }   public function AddUndead(&$arr)   {          $undead = 0;          for($i = 1;$i<15;$i++)          {              $t = round($this->_d[$i]*0.6);              $arr['t'.$i] += $t;              $this->_count += $t;              $undead += $t;          }         return $undead;   }   public function SetTroops(&$arr, $town = false)   {    $used = 0;    global $troops;    for($i = 1; $i < 15; $i++)    {     $arr['t'.$i] = ($this->_t[$i] - $this->_d[$i]);     $used += ($this->_d[$i] * $troops[$this->_r[0]][$i][8]);    }    if($this->_hero)    {              $arr['h'] = ($this->_h->life < 1 ? 0 : 1);              if($arr['h'])         $used += 1;    }    if($town)     $arr['used'] -= $used;   }      public function SetClooney(&$clooney)      {          for($i = 1; $i < 15; $i++)          {              $t = 't'.$i;              $clooney->$t = ($this->_t[$i] - $this->_d[$i]);          }      }   public function GetTroop()   {    return $this->_t;   }   public function GetUsed()   {    return $this->_used;   }      public function DefensePoints($wall, $e4_5 = 0, $e8_9 = 0, $e11_12 = 0,$attacker = 0, $curse = 0)      {          global $troops;          $k = $this->_r[0];          $wall += 1;          $this->_p = array('all'=>0,  1 => 0, 2 =>0, 3 =>0, 4 =>0, '4a' => 0,'4c' => 0,'4b' => 0,'spy' => 0, 'md'=>0, 'h' => 0);          if(!$this->_used)              return 0;          $this->_p['spy'] = $this->_t[7] * $this->_u[7];          if($this->_t[7])          {              if($e11_12)              {                  if(abs($e11_12) > $this->_t[7])                  {                      if($e11_12 > 0)                          $e11_12 = $this->_t[7];                      else                          $this->_t[7] = -$this->_t[7]/2;                  }              }              $this->_p['spy'] += $this->_p['spy'] * ($e11_12 / $this->_t[7]);          }          if(!$attacker)              return 0;          $defence = 0;          for($i = 1;$i<15;$i++)          {              if(!$this->_t[$i])                  continue;              $u = $this->_t[$i] * ($this->_u[$i] + $this->ExtendedPoint($i,2, 'hp7') );              switch($troops[$k][$i][7])              {                  case 1:                      $defence = ($defence | 1);                      break;                  case 2:                      $defence = ($defence | 2);                      break;                  case 3:                      $defence = ($defence | 4);                      break;                  case 4:                      $defence = ($defence | 7);                      break;                  case 5:                      if($i == 8)                          $defence = ($defence | 2);                      elseif($i == 9)                          $defence = ($defence | 4);                      else                          $defence = ($defence | 1);                      break;              }              if($i != 11)              {                  $this->_p[1] +=  ($u * $troops[$k][$i][1] * $wall);                  $this->_p[2] +=  ($u * $troops[$k][$i][2] * $wall);                  $this->_p[3] +=  ($u * $troops[$k][$i][3] * $wall);              }              else              {                  $this->_p['4a'] =  ($u * $troops[$k][$i][1] * $wall);                  $this->_p['4b'] =  ($u * $troops[$k][$i][2] * $wall);                  $this->_p['4c'] =  ($u * $troops[$k][$i][3] * $wall);              }          }            if($this->_used and $this->_t[12])          {              $this->_p['md'] = (($this->_u[12] * $this->_t[12])/ $this->_used ) / 3;              $this->_p['md'] += ($this->_hero ? ($this->_h->hp13 / 100) : 0);              if($e4_5)              {                  if(abs($e4_5) > $this->_used)                  {                      if($e4_5 > $this->_used)                          $e4_5 = $this->_used;                      else                          $e4_5 = -$this->_used;                  }              }                  $this->_p['md'] +=  ($e4_5 / $this->_used) / 3;              if($this->_p['md'] < 0)                  $this->_p['md'] = 0;          }          $i =0;          if(($attacker & 1) == 1)          {              $this->_p['all'] += $this->_p[1];              $i++;          }          if(($attacker & 2) == 2)          {              $this->_p['all'] += $this->_p[2];              $i++;          }          if(($attacker & 4) == 4);          {              $this->_p['all'] += $this->_p[3];              $i++;          }          if($i)              $this->_p['all'] /= $i;          if($this->_hero)              $this->_p['all'] += ($this->_h->hdp * (1 - $curse));          switch($attacker)          {              case 1:                  $this->_p[1] += $this->_p['4a'];                  $this->_p['all'] += $this->_p[4] =  $this->_p['4a'];                  break;              case 2:                  $this->_p[2] += $this->_p['4b'];                  $this->_p['all'] += $this->_p[4] =  $this->_p['4b'];                  break;              case 3:                  $this->_p[1] += ($this->_p['4a'] / 2);                  $this->_p[2] += ($this->_p['4b'] / 2);                  $this->_p['all'] += $this->_p[4] = (($this->_p['4a'] + $this->_p['4b'])/2);                  break;              case 4:                  $this->_p[3] += $this->_p['4c'];                  $this->_p['all'] += $this->_p[4] =  $this->_p['4c'];                  break;              case 5:                  $this->_p[1] += ($this->_p['4a'] / 2);                  $this->_p[3] += ($this->_p['4c'] / 2);                  $this->_p['all'] += $this->_p[4] =  (($this->_p['4a'] + $this->_p['4c'])/2);              case 6:                  $this->_p[2] += ($this->_p['4b'] / 2);                  $this->_p[3] += ($this->_p['4c'] / 2);                  $this->_p['all'] += $this->_p[4] =  (($this->_p['4b'] + $this->_p['4c'])/2);              case 7:                  $this->_p[1] += ($this->_p['4a'] / 3);                  $this->_p[2] += ($this->_p['4b'] / 3);                  $this->_p[3] += ($this->_p['4c'] / 3);                  $this->_p['all'] += $this->_p[4] =  (($this->_p['4a'] + $this->_p['4b'] + $this->_p['4c'])/3);                  break;          }          if($e8_9 and $this->_used)          {              $ex =  $this->_p['all'] * ($e8_9 / $this->_used);              if($ex > $this->_p['all']* 0.1)                  $ex = $this->_p['all']* 0.1;              $this->_p['all'] += $ex;          }          return $defence;      }      public function AttackPoints($e11_12, $e4_5, $e8_9, $curse = 0)      {          global $troops;          $k = $this->_r[0];          $this->_p = array('all'=>0,  1 => 0, 2 =>0, 3 =>0, 4 =>0,'4a' => 0,'4b' => 0,'4c' => 0, 'spy' => 0, 'md'=>0,'h' => 0);          if(!$this->_used)              return;          for($i = 1;$i<15;$i++)          {              if(!$this->_t[$i])                  continue;              if($i == 8)                  $this->_p[2] += ($this->_t[$i] * $troops[$k][$i][0] * $this->_u[$i]);              elseif($i == 9)                  $this->_p[3] += ($this->_t[$i] * $troops[$k][$i][0] * $this->_u[$i]);              elseif($i == 10)                  $this->_p[1] += ($this->_t[$i] * $troops[$k][$i][0] * $this->_u[$i]);              elseif($troops[$k][$i][7] == 5)                  $this->_p[1] += ($this->_t[$i] * $troops[$k][$i][0] * $this->_u[$i]);              else                  $this->_p[$troops[$k][$i][7]] += ($this->_t[$i] * $troops[$k][$i][0] * ($this->_u[$i] + $this->ExtendedPoint($i,3, 'hp6') ));          }          $this->_p['spy'] = $this->_t[7] * $this->_u[7];          if($this->_t[7])          {              if($e11_12)              {                  if(abs($e11_12) > $this->_t[7])                  {                      if($e11_12 > 0)                          $e11_12 = $this->_t[7];                      else                          $this->_t[7] = -$this->_t[7]/2;                  }              }              $this->_p['spy'] += $this->_p['spy'] * ($e11_12 / $this->_t[7]);          }          if($this->_used and $this->_t[12])          {              $this->_p['md'] = (($this->_u[12] * $this->_t[12])/ $this->_used ) / 3;              $this->_p['md'] += ($this->_hero ? ($this->_h->hp13 / 100) : 0);              if($e4_5)              {                  if(abs($e4_5) > $this->_used)                  {                      if($e4_5 > $this->_used)                          $e4_5 = $this->_used;                      else                          $e4_5 = -$this->_used;                  }              }              $this->_p['md'] +=  ($e4_5 / $this->_used) / 3;              if($this->_p['md'] < 0)                  $this->_p['md'] = 0;          }          $result = 0;          if($this->_p[1])              $result = $result | 1;          if($this->_p[2])              $result = $result | 2;          if($this->_p[3])              $result = $result | 4;          if(!$result)              $result = 7;          if($this->_hero)              $this->_p['all'] += $this->_p['h'] = $this->_h->hap * (1 - $curse);          switch($result)          {              case 1:                  $this->_p['4a'] = $this->_p[4];                  $this->_p[1] +=  $this->_p[4];                  $this->_p[1] += $this->_p['h'];                  break;              case 2:                  $this->_p['4b'] = $this->_p[4];                  $this->_p[2] +=  $this->_p[4];                  $this->_p[2] += $this->_p['h'];                  break;              case 3:                  $this->_p['4a'] = $this->_p[4] / 2;                  $this->_p['4b'] = $this->_p[4] / 2;                  $this->_p[1] +=  $this->_p['4a'];                  $this->_p[2] +=  $this->_p['4b'];                  $this->_p[1] += $this->_p['h']/2;                  $this->_p[2] += $this->_p['h']/2;              case 4:                  $this->_p['4c'] = $this->_p[4];                  $this->_p[3] +=  $this->_p[4];                  $this->_p[3] += $this->_p['h'];                  break;              case 7:                  $this->_p['4a'] =$this->_p['4b'] =$this->_p['4c'] = ($this->_p[4] /3);                  $this->_p[1] +=  $this->_p['4a'];                  $this->_p[2] +=  $this->_p['4b'];                  $this->_p[3] +=  $this->_p['4c'];                  $this->_p[1] += $this->_p['h']/3;                  $this->_p[2] += $this->_p['h']/3;                  $this->_p[3] += $this->_p['h']/3;                  break;              case 5:                  $this->_p['4a'] = $this->_p[4] / 2;                  $this->_p['4c'] = $this->_p[4] / 2;                  $this->_p[1] +=  $this->_p['4a'];                  $this->_p[3] +=  $this->_p['4c'];                  $this->_p[1] += $this->_p['h']/2;                  $this->_p[3] += $this->_p['h']/2;              case 6:                  $this->_p['4b'] = $this->_p[4] / 2;                  $this->_p['4c'] = $this->_p[4] / 2;                  $this->_p[2] +=  $this->_p['4b'];                  $this->_p[3] +=  $this->_p['4c'];                  $this->_p[2] += $this->_p['h']/2;                  $this->_p[3] += $this->_p['h']/2;                  break;          }          $this->_p['all'] = $this->_p[1] + $this->_p[2] + $this->_p[3];          if($e8_9 and $this->_used)          {              $ex = $this->_p['all'] * ($e8_9 / $this->_used);              if($ex > $this->_p['all'] * 0.1)                  $ex = $this->_p['all'] * 0.1;              $this->_p['all'] += $ex;          }          return $result;      }      public function Battle($lose,$spy)      {          if($lose == 1 or !$this->_used)              return;          if($lose < 0)              $lose = 0;          global $troops;          if($spy)          {              $this->_d[7] = (!$lose ? $this->_t[7] : ($this->_t[7] - round($this->_t[7] *$lose)));              $this->_used -= $troops[$this->_r[0]][7][8] *$this->_d[7];          }          else          {              if($this->_hero)              {                  $life = $this->_h->life *  (1 - $lose);                  $life = ($this->_h->life - $life);                  if($life < 1)                  {                      $this->_used -= 1;                      $this->_d[31] = 1;                      $life = 0;                  }                  $this->_h->SetFields(array('life'=> $life));              }              if($lose <= 0)              {                  $this->_d = $this->_t;                  $this->_used = 0;              }              else              {                  $k = $this->_r[0];                  for($i = 1;$i<15;$i++)                  {                      if(!$this->_t[$i])                      {                          $this->_d[$i] = 0;                          continue;                      }                                            $this->_d[$i] = ($this->_t[$i] - (int)round($this->_t[$i] * $lose));                      $this->_d[$i] -= round($this->_d[$i] * $this->_p['md']);                      if($this->_d[$i] >= $this->_t[$i])                          $this->_d[$i] = $this->_t[$i];                      if($this->_d[$i] < 0)                          $this->_d = 0;                      $this->_used -= $this->_d[$i] * $troops[$k][$i][8];                      $this->_count -= $this->_d[$i];                  }              }          }          if($this->_used <=0)              $this->_used = 0;      }      public function GetPoint($kind)      {          return $this->_p[$kind];      }   public function Reset()   {    for($i=1;$i<15;$i++)    {     $this->_t[$i] -= $this->_d[$i];     $this->_d[$i] = 0;    }          if($this->_hero)          {              if($this->_h->life <= 1)                 $this->_hero = 0;          }   }   public function GetPoints()   {    return $this->_p;   }      public function CountTroop()      {          return $this->_count;      }      public function HaveHero()      {          return $this->_hero;      }   protected function ExtendedPoint($tr, $kind,$point)   {    $in = array(1,2,3,4,5,6,11);    if(is_null($this->_h) or !$this->_hero)     return 0;    if(!in_array($tr,$in))     return 0;    $result = $this->_h->$point;    $l = array(1 => 1, 2 => 1, 3 => 2, 4 => 2, 5 => 3, 6 => 3, 11 => 4);    $t = 'khp'.$kind;    if($this->_h->$t == 5)    {     $t = 'php'.$kind;     $result += $this->_h->$t * HERO_ITEM_SPACIAL_POINT / 100;    }    elseif($this->_h->$t == $l[$tr])    {     $t = 'php'.$kind;     $result += $this->_h->$t * BASE_HERO_ITEM_TRAIN / 100;    }          if($result > 0.2)              return 0.2;    return $result;   }  }  ?>