<?php  require_once('lib/config.php');  require_once('lib/dbo.php');  require_once('lib/defines.php');  require_once('lib/object.php');  require_once('eng/main/account.php');  require_once('eng/main/elixir.php');  require_once('eng/main/report.php');  require_once('eng/main/troop.php');  require_once('eng/main/battel.php');  require_once('lib/utility.php');  define('IN_PROCEES_TOWN',0);  define('NO_DATA', -1);  define('UPDATED_TOWN',1);  define('DESTROYED_TOWN',2);  define('CAPTURE_TOWN',3);  define('DELETED_TOWN',4);    class UpClooney extends Object  {      protected $_cid;      protected $_locks;      public function IsLock()      {          if($this->_locks)              return true;          if($this->Lock($this->_cid))              return true;          else              return false;      }      protected function Lock()      {          if($this->_locks)              return true;          global $dbo;          $dbo->ExectueQuery(sprintf('UPDATE `%sclooney` SET `locks` = \'1\' WHERE `id` = \'%s\' AND `locks` = \'0\' LIMIT 1',              DB_PERFIX,$this->_cid));          $this->_locks = $dbo->AffectedRows();          if($this->_locks)          {              $this->_data = $dbo->ExectueRow(sprintf('SELECT * FROM `%sclooney` WHERE `id` = \'%s\'',                  DB_PERFIX, $this->_cid));              $this->_dummy = empty($this->_data);          }          return $this->_locks;      }      public function UnLock()      {          if(!$this->_locks)              return;          global $dbo;          $dbo->ExectueQuery(sprintf('UPDATE `%sclooney` SET `locks` = \'1\' WHERE `id` = \'%s\'',DB_PERFIX, $this->_isLocks));      }      public function Save()      {          if(!$this->_locks)              return;          global $dbo;          $this->_data['locks'] = '0';          $dbo->UpdateRow(DB_PERFIX.'clooney', $this->_data, $this->_cid);          $this->_locks = 0;      }      public function Load($cid)      {          $this->_cid = $cid;          return $this->Lock();      }      public function Update($modify)      {          if($this->_dummy)              return;          if(!$this->Lock())              return;          $tick = ($modify - $this->_data['modify'])/ONE_TICK;          if($this->_data['tack'] + 1 > $this->_data['max_t'])          {              $today = rand(1,14);              $r = 't'.$today;              $this->_data[$r]++;              if($this->_data[$r] > 255)                  $this->_data[$r] = 255;              $this->_data['tack'] = 0;              $this->_data['max_t']++;          }          $today = Today($modify);          if($today > $this->_data['modify'])          {              for($i = 1; $i<14; $i++)                  $this->_data['t'.$i] = $this->_data['b'.$i];              $this->_data['r1'] = $this->_data['r2'] = $this->_data['r3'] = $this->_data['r4'] = $this->_data['r5'] = '3600';              $this->_data['loyalty'] = '100';          }          else          {              for($i = 1;$i < 6;$i++)              {                  $r = 'r'.$i;                  $this->_data[$r] += $tick * 150;                  if($this->_data[$r] > 3600)                      $this->_data[$r] = 3600;              }              $this->_data['loyalty'] += $tick * (100/24);              if($this->_data['loyalty'] > 100)                  $this->_data['loyalty'] = 100;          }          $this->_data['modify'] = $modify;      }      public function SubResource(&$row,$carry)      {          if(!$carry)              return 0;          $total = 0;          $brr = array();          for($i = 1; $i < 6; $i++)          {              $r = 'r'.$i;              $total += $this->_data[$r];              $brr[$r] = floor($this->_data[$r]);          }          if($total < $carry)              $carry = $total;          $need = 0;          for($i = 1;$i < 6;$i++)          {              $r = 'r'.$i;              $row[$r] = floor($carry * ($brr[$r] /$total));              $this->_data[$r] -= $row[$r];              $need += $row[$r];          }          $carry -= $need;          while(($need < $total))          {              if($carry <= 0)                  break;              $j = 1;              for($i = 1; $i < 6;$i++)              {                  if($brr['r'.$i] > $brr['r'.$j])                      $j = $i;              }              $r = 'r'.$j;              $m = (floor($this->_data[$r]) - $need);              $t = (int)( $m > 0 ? $m : floor($this->_data[$r]));              if($t > $carry)                  $t = $carry;              $carry -= $t;              $this->_data[$r] -= $t;              $row[$r] += $t;              $need += $t;              $brr[$r] -= $t;          }          return $total;      }  }    class BaseUpdate  {      protected $_tid;      protected $_data;      protected $_account;      protected $_lock;      protected $_frozen;      protected $_elixir;      protected $_report;      protected $_blockade;      protected $_peace;      protected $_used;      protected $_tempReport = array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);      protected $_process;      protected $_destroyed;      protected $_rUsed = 0;      protected $_updated = true;      public function __construct(Account &$acc)      {          $this->_account = &$acc;          $this->_lock = false;          $this->_report = new Report();      }      protected function SetAccount(Account &$acc)      {          $this->_account = &$acc;      }      protected function Lock()      {          if($this->_lock)              return 1;          global $dbo;          if(($this->_account->id == 7))              return ($this->_Lock = 1);          $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `locks` = \'1\' WHERE `id` = \'%s\' AND `locks`= \'0\' LIMIT 1',              DB_PERFIX, $this->_tid));          $this->_lock = $dbo->AffectedRows();          return $this->_lock;      }      protected function UnLock()      {          if(!$this->_lock)              return;          if($this->_account->id == 7)          {              $this->_lock = 0;              return;          }          global $dbo;          $dbo->ExectueQuery(              sprintf('UPDATE `%stown` SET `locks` = \'0\' WHERE `id` = \'%s\' LIMIT 1',                  DB_PERFIX, $this->_data['id']));          $this->_lock = 0;          return;      }      protected function Load($tid)      {          global $dbo;          $this->_tid = $tid;          $this->_data = $dbo->ExectueRow(              sprintf('SELECT * FROM `%stown` WHERE `id` = \'%s\'', DB_PERFIX, $tid));    if(empty($this->_data))              $this->_updated = false;          $this->_rUsed = $this->_data['used'];          unset($this->_data['name']);          unset($this->_data['locks']);          $this->_data['uid'] = $this->_account->uid;          $this->_elixir = new Elixir($this->_tid);          $this->_frozen = $this->_elixir->frozen();          $this->_blockade = $dbo->ExectueScaler(              sprintf('SELECT COUNT(*) AS `c` FROM `%stroop_b` WHERE `tid2` = \'%s\' AND `d` = \'0\'',                  DB_PERFIX, $this->_tid),'c');          $this->_peace = $dbo->ExectueRow(sprintf('SELECT `kind`,`subkind` FROM `%sserver_info` WHERE `com` = \'%s\'',              DB_PERFIX,DAYS_OF_PEACE));          $this->_used = $dbo->ExectueScaler(              sprintf('SELECT SUM(`used`) AS `c` FROM `%stroop_su` WHERE `tid2` =\'%s\'',              DB_PERFIX, $this->_tid),'c');          gc_collect_cycles();      }      protected function IsLock()      {          if($this->_lock)              return true;          return false;      }      protected function DeleteAllRecord($destroyed = 0)      {          global $dbo;          $dbo->ExectueQuery(sprintf('UPDATE `%stroop_s` SET `d` = \'1\' WHERE `tid1` = \'7\' AND `tid2` = \'%s\' AND `d` = \'0\'',              DB_PERFIX,$this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%stroop_s` SET `d` = \'1\' WHERE `tid1` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%stroop_b` SET `d` = \'1\' WHERE `tid1` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%stroop_su` SET `d` = \'1\' WHERE (`tid1` = \'%s\' OR `tid2` = \'%s\') AND `d` = \'0\'',              DB_PERFIX, $this->_data['id'], $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%selixir_b` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%selixir_e` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `kind` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id'],ELIXIR_GOOD));          $dbo->ExectueQuery(sprintf('UPDATE `%sbuilding_q` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%sresearch` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%smarket` SET `d` = \'1\' WHERE `tid1` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%smarket_p` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `tid2` = \'0\' WHERE `tid2` = \'%s\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `tid1` = \'0\' WHERE `tid1` = \'%s\'',              DB_PERFIX, $this->_data['id']));          $dbo->ExectueQuery(sprintf('UPDATE `%selixir_e` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `kind` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id'],ELIXIR_BAD));          if($destroyed)          {              $dbo->ExectueQuery(sprintf('UPDATE `%sreports` SET `mid` = \'0\' WHERE `mid` = \'%s\'',                  DB_PERFIX,$this->_data['mid']));              $dbo->ExectueQuery(sprintf('UPDATE `%smarket` SET `kind` = \'%s\', `pid2` = \'0\', `tid2` = \'0\', `modify` = `modify` + (`len` - (`modify` - \'%s\'))  WHERE `tid2` = \'%s\' AND `d` = \'0\' AND `kind` = \'%s\'',                  DB_PERFIX,MARKET_RETURN, $destroyed, $this->_data['id'], MARKET_SEND));              $dbo->ExectueQuery(sprintf('UPDATE `%stroop_s` SET `kind` = \'%s\', `pid2` = \'0\', `tid2` = \'0\', `e1` = \'0\', `e2` = \'0\', `modify` = `modify` + (`len` - (`modify` - \'%s\')) WHERE `tid2` = \'%s\' AND `d` = \'0\'',                  DB_PERFIX,A_RETURN,$destroyed, $this->_data['id']));              $dbo->ExectueQuery(sprintf('DELETE FROM `%sgolden` WHERE `tid2` = \'%s\'',                  DB_PERFIX, $this->_data['id']));              $sql = $dbo->ExectueQuery(sprintf('SELECT * FROM `%stroop_b` WHERE `pid1` != \'7\' AND `tid2` = \'%s\' AND `d` = \'0\'',                  DB_PERFIX,$this->_data['id']));              while($row = $dbo->Read($sql))              {                  $arr = $this->CopyTroops($row);                  $arr['kind'] = A_RETURN;                  $arr['pid1'] = $row['pid1'];                  $arr['pid2'] = $row['pid2'];                  $arr['mid1'] = $row['mid1'];                  $arr['mid2'] = $row['mid'];                  $arr['tid1'] = $row['tid1'];                  $arr['tid2'] = $row['tid2'];                  $arr['len'] = (24* ONE_TICK);                  $arr['modify'] = $arr['len'] + $destroyed;                  $dbo->InsertRow(DB_PERFIX.'troop_s',$arr);                  $this->DeleteRecord(DB_PERFIX.'troop_b',$row['id']);                  gc_collect_cycles();              }              $dbo->Cancel($sql);          }          else          {              $dbo->ExectueQuery(sprintf('UPDATE `%smarket` SET  `pid2`= \'%s\' WHERE `tid2` = \'%s\' AND `d` = \'0\' AND `kind` = \'%s\'',                  DB_PERFIX, $this->_account->id, $this->_data['id'], MARKET_SEND));              $dbo->ExectueQuery(sprintf('UPDATE `%stroop_s` SET  `pid2`= \'%s\' WHERE `tid2` = \'%s\' AND `d` = \'0\'',                  DB_PERFIX, $this->_account->id, $this->_data['id']));          }      }      protected function Save($lock = false)      {          global $dbo;    if(!isset($this->_data['id']))     return;          if(!$this->_account->ac)          {              if($this->_account->Deleted($this->_data['modify']))                  $this->_account->SetFields(array('ac' =>'0'));          }          if(!$this->_account->ac and ($this->_account->id != '7'))          {              if($this->_data['cap'])              {                  $this->_data['cap'] = '0';                  $this->_data['pid'] = '5';                  $this->_destroyed = '0';                  if($this->_account->id != 5)                  {                      $ac = new Account('5');                      $this->SetAccount($ac);                  }                  $this->DeleteAllRecord();              }              else                  $this->DeleteAllRecord($this->_data['modify']);          }          if($this->_destroyed and $lock)          {              $this->DeleteAllRecord($this->_data['modify']);              $dbo->DeleteRecord(DB_PERFIX.'town',$this->_data['id']);              $dbo->ExectueQuery(sprintf('UPDATE `%smap_t` SET `subid` = \'0\' WHERE `id` = \'%s\' LIMIT 1',                  DB_PERFIX, $this->_data['mid']));              if($this->_data['pclo'])                  $dbo->ExectueQuery(sprintf('UPDATE `clooney` SET `pid` = \'0\',`tid` = \'0\' WHERE `tid` = \'%s\'',                      DB_PERFIX, $this->_data['id']));              $this->_account->SetTown($this->_data['id']);          }          else          {              if($lock)              {                  $this->_data['locks'] = '0';                  $this->_lock = 0;              }              elseif(isset($this->_data['locks']))                  unset($this->_data['locks']);              $this->_elixir->EndEffect($this->_data['modify']);              $set = 'UPDATE `'.DB_PERFIX.'town` SET ';              $b = false;              foreach ($this->_data as $key => $value)              {                  if($b)                      $set .= ' , ';                  else                      $b = true;                  if($key == 'used')                  {                      $set .= '`'.$key.'` = `'.$key.'` + \''.($value - $this->_rUsed).'\'';                      $this->_rUsed = $value;                  }                  else                  {                      if(is_null($value))                          $set .= '`'.$key.'` = NULL';                      else                          $set .= '`'.$key.'` = \''.$value.'\'';                  }              }              $set .= sprintf('WHERE `id` = \'%s\' LIMIT 1',$this->_data['id']);              $dbo->ExectueQuery($set);          }      }      protected function UnLock2Town(&$up1,&$up2)      {          if($up1->IsLock())              $up1->Save(true);          if(!is_null($up2) and $up2->IsLock())              $up2->Save(true);      }      protected function Lock2Town(&$up1, &$up2)      {          if(!$up1->Lock())              return false;          if(!is_null($up2))          {              if(!$up2->Lock())              {                  $up1->UnLock();                  return false;              }              $up2->Load($up2->_data['id']);          }          $up1->Load($up1->_data['id']);          return true;      }      protected function AddHonor($pid, $uid, $point)      {          if(!$point or !($pid < 8))              return;          global $dbo;          if($uid)              $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `honor` = `honor` + \'%s\' WHERE `owner` = \'%s\' AND `kind` = \'%s\'',                  DB_PERFIX,$point, $uid, UNION_KIND));          $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `honor` = `honor` + \'%s\' WHERE `owner` = \'%s\' AND `kind` = \'%s\'',              DB_PERFIX,$point, $pid, PLAYER_KIND));      }      protected function MultiHunter($r1, $r2, $r3, $r4, $r5, $pid1, $pid2, $modify)      {          if($pid1 == $pid2)              return;          global $dbo;          $modify = Today($modify);          $id = $dbo->ExectueScaler(sprintf('SELECT `id` FROM `%smulti` WHERE `pid1` = \'%s\' AND `pid2` = \'%s\' AND `modify` = \'%s\' LIMIT 1',DB_PERFIX, $pid1, $pid2, $modify),'id');          if($id)              $dbo->ExectueQuery(sprintf('UPDATE `%smulti` SET `r1` = `r1` + \'%s\',`r2` = `r2` + \'%s\',`r3` = `r3` + \'%s\', `r4` = `r4` + \'%s\',`r5` = `r5` + \'%s\' WHERE `id` = \'%s\' LIMIT 1;',DB_PERFIX,$r1, $r2, $r3, $r4, $r5, $id));          else              $dbo->ExectueQuery(sprintf('INSERT INTO `%smulti` (`pid1`, `pid2`, `r1`, `r2`, `r3`, `r4`, `r5`, `modify`) VALUES (\'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\', \'%s\');',DB_PERFIX, $pid1, $pid2, $r1, $r2, $r3, $r4, $r5, $modify));      }      protected function DeleteRecord($table,$id)      {          global $dbo;          $dbo->ExectueQuery(sprintf('UPDATE `%s` SET `d` = \'1\' WHERE `id` = \'%s\' LIMIT 1',              $table,$id));      }      protected function IsPeace($up)      {          if(empty($this->_peace))              return false;          if(($this->_peace['kind']) <= $up  and ($this->_peace['subkind'] >= $up))              return true;          return false;      }      protected function &CopyTroops(&$row)      {          $arr = array();          for($i=1;$i <14;$i++)          {              $t = 't'.$i;              $arr[$t] = $row[$t];          }          $arr['h'] = $row['h'];          return $arr;      }      protected function SaveBlockade(&$row,$id,$kind,$tid,$used)      {          $arr = array();          global $dbo;          global $troops;          $save = 0;          for($i = 1;$i < 15; $i++)          {              $t = 't'.$i;              if(!$row[$t])                  continue;              $arr[$t] = $row[$t];              $save += ($troops[$kind][$i][8]*$arr[$t]);          }          if($row['h'])          {              $arr['h'] = '1';              $save++;          }          if($save)              $dbo->UpdateRow(DB_PERFIX.'troop_b',$arr,$id);          else          {              $dbo->DeleteRecord(DB_PERFIX.'troop_b',$id);              $this->_blockade--;          }          if($tid > 7)              $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `used` = `used` - \'%d\' WHERE `id` = \'%s\' LIMIT 1;',                      DB_PERFIX, $used - $save,$tid));      }      protected function SaveSupport(&$row,$id,$kind,$used)      {          $arr = array();          global $dbo;          global $troops;          $this->_used -= $used;          $save = 0;          for($i = 1;$i < 15; $i++)          {              $t = 't'.$i;              if(!$row[$t])                  continue;              $arr[$t] = $row[$t];              $save += ($troops[$kind][$i][8]*$arr[$t]);          }          if($row['h'])          {              $arr['h'] = '1';              $save += 1;          }          if($save)          {              $arr['used'] = $save;              $dbo->UpdateRow(DB_PERFIX.'troop_su',$arr,$id);            }            else              $dbo->DeleteRecord(DB_PERFIX.'troop_su',$id);          $this->_used += $save;      }      protected function GetSupport($mid,$troops = true)      {          global $troops;          global $dbo;          $arr = array();          if($troops)          {              $i = 0;              $sql = $dbo->ExectueQuery(sprintf('SELECT `su`.*,`a`.`kind`,`a`.`uid`, `t`.`up1`, `t`.`up2`, `t`.`up3`, `t`.`up4`, `t`.`up5`, `t`.`up6`, `t`.`up7`, `t`.`up8`, `t`.`up9`, `t`.`up9`, `t`.`up10`, `t`.`up11` FROM `%1$stroop_su` AS `su` LEFT JOIN `%1$saccount` AS `a` ON (`su`.`pid1` = `a`.`id`) LEFT JOIN `%1$stown` AS `t` ON (`su`.`tid1` = `t`.`id`) WHERE `su`.`mid` = \'%2$s\'  AND `su`.`d` = \'0\'', DB_PERFIX, $mid));              while($row = $dbo->Read($sql))              {                  $arr[$i] = array();                  $arr[$i]['id'] = $row['id'];                  $arr[$i]['pid'] = $row['pid1'];                  $arr[$i]['tid'] = $row['tid1'];                  $arr[$i]['bt'] = new BattelTroop($row['kind']);                  $arr[$i]['kind'] = $row['kind'];                  $arr[$i]['uid'] = $row['uid'];                  $arr[$i]['bt']->Load($row);                  $arr[$i]['used'] = $arr[$i]['bt']->GetUsed();                  $arr[$i]['row'] = $this->CopyTroops($row);                  $i++;              }              $dbo->Cancel($sql);          }          else          {              $sql = $dbo->ExectueQuery(sprintf('SELECT `su`.*,`a`.`kind` FROM `%1$stroop_su` AS `su` LEFT JOIN `%1$saccount` AS `a` ON (`su`.`pid1` = `a`.`id`) WHERE `su`.`tid2` = \'%2$s\' AND `su`.`d` = \'0\' ORDER BY `su`.`used`',DB_PERFIX,$mid));              while($row = $dbo->Read($sql))                  $arr[] = $row;              $dbo->Cancel($sql);          }          return $arr;        }  }    class TownUpdate extends BaseUpdate  {      protected function AddTroopRow($table,$row,$id)      {          global $dbo;          if($id)          {              $arr = array('t1','t2','t3','t4','t5','t6','t7','t8','t9','t10','t11','t12','t13','t14','used');              $sql = sprintf('UPDATE `%s` SET `d` = \'0\',',$table);              foreach($row as $key=>$value)              {                  if(in_array($key,$arr))                      $sql .= sprintf(',`%s` =  `%s` + \'%s\'',$key,$key,$value);                  else                      $sql .= sprintf(',`%s` = \'%s\'',$key, $value);              }              $sql .= sprintf('WHERE `id` = \'%s\' LIMIT 1;',$id);              $dbo->ExectueQuery($sql);          }          else              $dbo->InsertRow($table,$row);      }      protected function AddBlockageRow(&$row)      {          $temp = $this->CopyTroops($row);          $row['t13'] = $row['t14'] = $row['h'] = '0';          $temp['pid1'] = $row['pid1'];          $temp['pid2'] = $row['pid2'];          $temp['tid1'] = $row['tid1'];          $temp['tid2'] = $row['tid2'];          $temp['mid'] = $row['mid2'];          $this->AddTroopRow(DB_PERFIX.'troop_b',$temp,'0');          $this->_blockade++;      }      protected function AddSupport(&$row,$kind)      {          if($this->_account->id < 8)          {              $this->TroopReturn($row);              return 0;          }          global $dbo;          global $troops;          $id = $dbo->ExectueScaler(sprintf('SELECT `id` FROM `%stroop_su` WHERE `tid1` = \'%s\' AND `mid` = \'%s\'',              DB_PERFIX, $row['tid1'], $row['mid2']),'id');          $hero = false;          $arr = array();          $arr['pid1'] = $row['pid1'];          $arr['tid1'] = $row['tid1'];          $arr['pid2'] = $row['pid2'];          $arr['tid2'] = $row['tid2'];          $arr['mid'] = $row['mid2'];          $used = 0;          $temp = $this->_tempReport;          $temp[0] = $kind;          for($i=1;$i<15;$i++)          {              $t = 't'.$i;              if(!$row[$t])                  continue;              $temp[$i] = $temp[$i + 15] = $arr[$t] = $row[$t];              $used += ($troops[$kind][$i][8] * $row[$t]);              $row[$t] = 0;          }          if($row['h'])          {              if(($row['pid1'] != $row['pid2']) or ($row['pid1'] != $this->_account->id))                  $this->TroopReturn($row);              elseif($row['cid'])                  $this->TroopReturn($row);              else              {                  $this->_data['used']++;                  $this->_data['h'] =  '1';                  $this->_account->SetFields(array('htid' => $this->_data['id']));                  $this->DeleteRecord(DB_PERFIX.'troop_s',$row['id']);              }          }          else              $this->DeleteRecord(DB_PERFIX.'troop_s',$row['id']);          $arr['used'] = $used;          $this->AddTroopRow(DB_PERFIX.'troop_su', $arr, $id);          $this->_used += $used;          $this->_report->Support($row, $temp);          return $used;      }      protected function AddUndead(&$row,$modify = 0)      {          global $dbo;          $d = 1;          for($i=1;$i<13;$i++)              $d += $row['t'.$i];          $row['t14'] = $row['t13'] = '0';          if($modify)          {              $block = $this->CopyTroops($row);              $send = $block;              $send['pid1'] = $block['pid1'] = $send['tid1'] =  $block['tid1'] = '7';              $send['tid2'] = $block['tid2'] = $this->_data['id'];              $send['pid2'] = $block['pid2'] = $this->_data['pid'];              $block['tid1'] = '7';              $send['mid2'] = $block['mid'] = $this->_data['mid'];              $dbo->InsertRow(DB_PERFIX.'troop_b',$block);              $send['mid1'] = $dbo->InsertedID();              $d = 1;              for($i = 1;$i<13;$i++)                  $d += $send['t'.$i];              $dbo->ExectueQuery(                  sprintf('INSERT INTO `%selixir_e` (`tid`, `eid`, `num`, `kind`, `modify`) VALUES (\'%s\', \'6\', \'%d\', \'%s\', \'%s\');',                      DB_PERFIX,$this->_data['id'],$d, ELIXIR_BAD,$modify + (24*ONE_TICK)));              $send['len'] = $dbo->InsertedID();              $send['kind'] = A_ATTACK;              $send['modify']= $modify + (24*ONE_TICK);              $dbo->InsertRow(DB_PERFIX.'troop_s',$send);              return;          }          $send = $dbo->ExectueRow(sprintf('SELECT * FROM `%stroop_s` WHERE `tid1` = \'7\' AND `tid2` = \'%s\' AND `d` = \'0\' ORDER BY `modify`',              DB_PERFIX,$this->_data['id']));          if(empty($send))              return;          $block = $dbo->ExectueRow(sprintf('SELECT * FROM `%stroop_b` WHERE `id` = \'%s\'',              DB_PERFIX, $send['mid1']));          $d = 1;          for($i= 1;$i<13;$i++)          {              $t = 't'.$i;              $block[$t] = $send[$t] += $row[$t];              $d += $block[$t];          }          $dbo->UpdateRow(DB_PERFIX.'troop_s',$send,$send['id']);          $dbo->UpdateRow(DB_PERFIX.'troop_b',$block,$block['id']);          $dbo->ExectueQuery(sprintf('UPDATE `%selixir_e` SET `num` = \'%d\' WHERE `id` = \'%s\'',DB_PERFIX, $d,$this->_data['id']));      }      protected function UpR5($p, $tick)      {          if($tick < 0)              return 0;          return  $p * $tick;      }      protected function UpRes($r, $p, $l, $tick)      {          if($tick < 0)              return;          $pro = $p * $tick;          $pro += $this->_data[$r];          $this->_data[$r] = $pro > $this->_data[$l] ? $this->_data[$l] : $pro;      }      protected function HeroLevel($point)      {          $a = 100;          for($i = 0; $i < 100; $i++)          {              $a += $i * 200;              if($a >= $point)                  return $i;          }          return 100;      }      protected function UpAccount($up)      {          if($this->_account->modify == $up)              return;          $arr = array('modify' => $up);          $modify = $this->_account->modify;          if($this->_account->life < 1)          {              if(is_null($this->_account->rebirth))              {                  $modify = $up;                  $arr['life'] = '0';              }              elseif($this->_account->rebirth <= $up)              {                  $arr['life'] = 100;                  $this->_account->life = 100;                  $arr['rebirth'] = NULL;                  $modify = $this->_account->rebirth;                  $this->_data['h'] = '1';                  $this->_data['used'] += 1;              }          }          $tick = ($up - $modify) / ONE_TICK;          $arr['cp'] = ($tick * $this->_account->hp12);          $arr['lvl'] = $this->HeroLevel($this->_account->exp);          $arr['point'] = ($arr['lvl'] * 4) - ($this->_account->p1 + $this->_account->p2 + $this->_account->p3 + $this->_account->p4);          if(($this->_account->life < 100) and ($this->_account->life > 0))          {              $arr['life'] = ($this->_account->life + (($this->_account->hp10/24) * $tick));              if($arr['life'] > 100)                  $arr['life']  = '100.000000';          }          elseif($this->_account->life <= 0)              $arr['life'] = '0.000000';          $this->_account->SetFields($arr);            return 1 - (($this->_account->hp8/100) * $tick);      }      protected function UpResource($up)      {          if($this->_data['modify'] >= $up)              return;          $cp = $this->_data['cp'];          $tick = (($up - $this->_data['modify']) / ONE_TICK);          $ftick = 0;          if($this->_frozen)              $ftick = (($this->_frozen > $up) ? $tick :                  (($this->_frozen - $this->_data['modify']) / ONE_TICK));          if($ftick < 0)              $ftick = 0;            if($this->_elixir->Number(10, ELIXIR_GOOD, $up))              $cp += ($cp * 0.5);          if($this->_elixir->Number(10, ELIXIR_BAD, $up))              $cp -= ($cp * 0.5);          $this->_account->SetFields(array('cp' => ($this->_data['cp'] * (($tick - $ftick) / 24))));          $this->_data['loyalty'] += ($tick - $ftick)* (              $this->_elixir->Number(10,ELIXIR_BAD,$up) ? 0.5 : 1);          $this->_data['loyalty'] =              (($this->_data['loyalty'] > 100) ? '100.000000' : $this->_data['loyalty']);          if($this->_data['pclo'])          {              global $dbo;              $sql = $dbo->ExectueQuery(sprintf('SELECT `id`,`loyalty` FROM `%sclooney` WHERE `tid` = \'%s\' AND `loyalty` < \'100\'',                  DB_PERFIX, $this->_data['id']));              while($row = $dbo->Read($sql))              {                  $row['loyalty'] += $tick * (100/24);                  if($row['loyalty'] > 100)                      $row['loyalty'] = 100;                  $dbo->UpdateRow(DB_PERFIX.'clooney',$row,$row['id']);              }              $dbo->Cancel($sql);          }          $_pro = array();          $_pro['c'] = 1 + ($this->_data['pclo'] / 100);          $_pro['g'] = 0;          for($i = 7; $i <26; $i++)          {              $b = 'b'.$i;              if($this->_data[$b] == 29 or $this->_data[$b] == 30)                  $_pro['g'] += ($this->_data['u'.$i] * 0.0125);          }          for($i = 1; $i < 5; $i++)          {              $r = 'r'.$i;              $p = $this->_data['p'.$i];              $w = $this->_data['w'.$i];              $l = 'r'.$i;              $p1 = $_pro['c'];              if($this->_account->$r <= $this->_data['modify'])                  $this->UpRes($r, ($p * $p1) + ($p * $w * $p1 * WORKER_POINT),'l1', $tick - $ftick);              else              {                  if($this->_account->$r > $up)                  {                      $p1 += PLUS_RESOURCE_POINT;                      $this->UpRes($r, ($p * $p1) + ($p * $w * $p1 * WORKER_POINT),'l1', $tick - $ftick);                  }                  else                  {                      $this->UpRes($r, ($p * $p1) + ($p * $w * $p1 * WORKER_POINT),'l1', (($this->_account->$r - $this->_data['modify'])/ONE_TICK) - $ftick);                      $p1 += PLUS_RESOURCE_POINT;                      $this->UpRes($r, ($p * $p1) + ($p * $w * $p1 * WORKER_POINT),'l1', (($up - $this->_account->$r) / ONE_TICK) - $ftick);                  }              }          }          $p = $this->_data['p5'];          $w = $this->_data['w5'];          $p1 = ($_pro['g'] + $_pro['c']);          $e = 0;          $e -= $this->_elixir->Number(1, ELIXIR_BAD, $up);          $e += $this->_elixir->Number(2, ELIXIR_GOOD, $up);          $tpro = $this->_data['r5'];          if($ftick)              $tpro += $this->_data['w5'] * $this->_data['p5'] * ($tick - $ftick);          if($this->_account->r5 <= $this->_data['modify'])              $tpro += $this->UpR5(($p * $p1) + ($p * $w * $p1 * WORKER_POINT), $tick - $ftick);          else          {              if($this->_account->r5 > $up)              {                  $p1 += PLUS_RESOURCE_POINT;                  $tpro += $this->UpR5(($p * $p1) + ($p * $w * $p1 * WORKER_POINT), $tick - $ftick);              }              else              {                  $tpro += $this->UpR5(($p * $p1) + ($p * $w * $p1 * WORKER_POINT), (($this->_account->r5 - $this->_data['modify'])/ONE_TICK) - $ftick);                  $p1 += PLUS_RESOURCE_POINT;                  $tpro += $this->UpR5($r, ($p * $p1) + ($p * $w * $p1 * WORKER_POINT), (($up - $this->_data['modify']) / ONE_TICK) - $ftick);              }          }          $hp = 1;          if($this->_account->htid == $this->_data['id'])              $hp = $this->UpAccount($up);          $tused = ((($this->_used + $this->_data['used']) * $hp) + $this->_data['pop']) * $tick;          if($e > 0)              $tused -= (($e > $tused ? $tused / 2 : $e /2) * $tick);          else          {              $e = abs($e);              $tused += (($e > $tused ? $tused / 2 : $e /2) * $tick);          }          $tpro -= $tused;          $tpro = ($tpro < 0 ? $this->Starve($tpro, $up) : $tpro);          $this->_data['r5'] = ($tpro > $this->_data['l2'] ? $this->_data['l2'] : $tpro);          $this->_data['modify'] = $up;      }      protected function IsTownDestroy()      {          for($i=1;$i<28;$i++)              if($this->_data['b'.$i])                  return false;          return true;      }      protected function &GetBuildingList($building = 26)      {          $arr = array();          for($i = 1;$i < $building; $i++)          {              if($this->_data['b'.$i] and $this->_data['u'.$i])                  $arr[] = $i;          }          return $arr;      }      protected function GetBuildingInfo($bid, $lvl1, $lvl2)      {          global $dbo;          return $dbo->ExectueRow(sprintf('SELECT SUM(`r5`) AS `r5`,SUM(`pop`) AS `pop`, SUM(`cp`) AS `cp`, SUM(`func`) AS `func` FROM `%sbuilding_d` WHERE `bid` = \'%s\' AND  (`lvl` <= \'%s\' AND `lvl` > \'%s\')',DB_PERFIX, $bid, $lvl1, $lvl2));      }      protected function Starve($need, $modify)      {          if($this->IsPeace($modify))              return -$need;          $this->_data['w1'] = $this->_data['w2'] = $this->_data['w3'] = $this->_data['w4'] = 0;          $this->_data['w5'] = $this->_data['workers'];          if(!($this->_used + $this->_data['used']))          {              $tempBuilding = $this->GetBuildingList(27);              if(count($tempBuilding))              {                  $tick  = floor($this->_data['modify'] - $modify);                  for($i = 0; $i < $tick; $i++)                  {                      $tempBuilding = $this->GetBuildingList(27);                      $building = array_rand($tempBuilding);                      while(($building = array_rand($tempBuilding)) == 5);                      $info = $this->GetBuildingInfo(                          $this->_data['b'.$building],                          $this->_data['u'.$building],                          $this->_data['u'.$building] - 1);                      $this->_data['cp'] -= $info['cp'];                      $this->_data['pop'] -= $info['pop'];                      $this->_account->AddPop(-$info['pop']);                      $need += $info['r5'];                  }              }              return $need;          }          global $troops;          if($this->_used)          {              $su = $this->GetSupport($this->_data['id'],false);              $csu = count($su);              $bused = $this->_used;              for($i = 0;$i < $csu and $need < 0; $i++)              {                  $kind = $su[$i]['kind'];                  $tused = $su[$i]['used'] / $bused ;                  for($j =1;$j<2;$j++)                  {                      $t ='t'.$j;                      if(!$su[$i][$t])                          continue;                      $u = $troops[$kind][$j][8];                      $un = (int)ceil($su[$i][$t] * ( ($su[$i][$t] * $u) / $su[$i]['used']) * $tused);                      $un = $un <= $su[$i][$t] ? $un : $su[$i][$t];                      $su[$i][$t] -= $un;                      $need += ($un*$troops[$kind][$j][9]);                  }                  $this->SaveSupport($su[$i],$su[$i]['id'],$su[$i]['kind'],$su[$i]['used']);              }          }          if($need < 0 and $this->_data['used'])          {              for($i = 1; $i < 14; $i++)              {                  $t ='t'.$i;                  if(!$this->_data[$t])                      continue;                  $u = $troops[$this->_account->kind][$i][8];                  $un = (int)ceil($this->_data[$t] * ( ($this->_data[$t] * $u) / $this->_data['used']));                  $un = ($un > $this->_data[$t] ? $this->_data[$t] : $un);                  $need += $un * $troops[$this->_account->kind][$i][9];                  $this->_data[$t] -= $un;                  $this->_data['used'] -= ($un * $u);              }              if($need < 0 and $this->_data['h'])              {                  $this->_account->SetField(array('life' => 0, 'modify' => $modify));                  $this->_data['h'] = 0;                  $need += ($this->_account->lvl + 1) * 500;              }          }          return $need;      }      protected function UpFrozen($up)      {          global $dbo;          if($this->_frozen)          {                $f = (($this->_frozen > $up ? $up : $this->_frozen) - $this->_data['modify']);              if($f > 0)              {                  $dbo->ExectueQuery(sprintf('UPDATE `%sbuilding_q` SET `modify` = `modify` + \'%s\' WHERE `tid` = \'%s\' AND `d` = \'0\'',                      DB_PERFIX, $f, $this->_data['id']));                  $dbo->ExectueQuery(sprintf('UPDATE `%selixir_b` SET `modify` = `modify` + \'%s\' WHERE `tid` = \'%s\' AND `d` = \'0\'',                      DB_PERFIX, $f, $this->_data['id']));                  $dbo->ExectueQuery(sprintf('UPDATE `%stroop_t` SET `start` = `start` + \'%s\', `end` = `end` + \'%s\'  WHERE `tid` = \'%s\' AND `d` = \'0\'',                      DB_PERFIX, $f, $f, $this->_data['id']));                  $dbo->ExectueQuery(sprintf('UPDATE `%sresearch` SET `modify` = `modify` + \'%s\' WHERE `tid` = \'%s\' AND `d` = \'0\'',                      DB_PERFIX, $f, $this->_data['id']));              }          }      }      protected function GetLevel($bid)      {          for($i = 1;$i < 28; $i++)          {              if($this->_data['b'.$i] == $bid)                  return $this->_data['u'.$i];          }          return 0;      }      protected function UpBuilding($up)      {          global $dbo;          $table = DB_PERFIX.'building_q';          $sql = sprintf(sprintf('SELECT * FROM `%s` WHERE `tid` = \'%s\' AND `modify` <= \'%s\' AND `d` = \'0\' ORDER BY `modify` ASC',              $table, $this->_data['id'], $up));          while($row = $dbo->ExectueRow($sql))          {              $this->UpTroops($row['modify']);              $this->_data['u'.$row['bid']] = $row['lvl'];              if($row['func'] and ($row['kind'] == DES_BUILDING))                  $row['func'] =  -$row['func'];              switch($this->_data['b'.$row['bid']])              {                  case 1:                  case 2:                  case 3:                  case 4:                  case 5:                      $this->_data['p'.$row['bid']] += $row['func'];                      break;                  case 7:                      $this->_data['l1'] +=$row['func'];                      break;                  case 8:                      $this->_data['l2'] += $row['func'];                      break;                  case 10:                      $this->_data['hiding'] += $row['func'];                      break;                  case 24:                      if($this->_account->uid)                          $dbo->ExectueQuery(sprintf('UPDATE `%sunion_b` SET `limits` = \'%d\' WHERE `id` = \'%s\' AND `tid` = \'%s\'',                              DB_PERFIX, (($row['lvl'] - 2)*5) + 10, $this->_account->uid, $this->_data['id']));                      break;                  case 28:                      $this->_data['workers'] += $row['func'];                      break;                  case 32:                      if($row['lvl'] == 72)                      {                          $name = $dbo->ExectueScaler(sprintf('SELECT `name` FROM `%stown` WHERE `id` = \'%s\' LIMIT 1',                              DB_PERFIX,$this->_data['id']),'name');                          $dbo->ExectueQuery(sprintf('INSERT INTO `%spm` (`se`, `re`, `flag`, `subject`, `message`, `modify`) SELECT  \'1\',`id`, \'%d\', \'%s\',\'FIN:%s:%s:%s:%s\', \'%s\' FROM `%1$saccount` WHERE `ac` = \'1\'',                              DB_PERFIX, NOT_READ | SYS_INFO, $GLOBALS['lang']['Finishing'],                              $this->_account->id, $dbo->EscapeString($this->_account->name),                              $this->_data['id'], $dbo->EscapeString($name), $row['modify']));                          $arr = array('com'=>SERVER_END, 'kind' => $row['modify']);                      }                      break;              }              if($row['kind'] == DES_BUILDING)              {                  if($row['lvl'] == '0')                      $this->_data['b'.$row['bid']] = '0';                  $this->_data['cp'] -= $row['cp'];                  $this->_data['pop'] -= $row['pop'];                  $this->_account->AddPop(-$row['pop']);              }              else              {                  $this->_data['cp'] += $row['cp'];                  $this->_data['pop'] += $row['pop'];                  $this->_account->AddPop($row['pop']);              }              $this->DeleteRecord($table,$row['id']);          }          $this->UpResearch($up);          $this->UpTroops($up);      }      protected function UpResearch($up)      {          global $dbo;          $table = DB_PERFIX.'research';            $sql = sprintf('SELECT * FROM `%s` WHERE `tid` = \'%s\' AND `modify` <= \'%s\' AND `d` = \'0\' ORDER BY `modify` ASC',              $table, $this->_data['id'], $up);            $one = 1;          $arr = array('cp' => 0);          while($row = $dbo->ExectueRow($sql))          {              switch($row['kind'])              {                  case RES_TROOP:                      $this->_data['res_u'] = ($this->_data['res_u'] | ($one << ($row['subkind'] - 1)));                      break;                  case RES_ELIXIR:                      $this->_data['res_e'] = ($this->_data['res_e'] | ($one << ($row['subkind'] - 1)));                      break;                  case RES_UPGRADE:                      $t = 'up'.$row['subkind'];                      $this->_data[$t] += 1;                      break;                  case RES_PARTY:                      $arr['cp'] = $row['subkind'];                      $this->_account->SetFields($arr,true);                      break;              }              $this->DeleteRecord($table,$row['id']);          }      }      protected function UpTroops($up)      {          global $dbo;          if($this->_data['modify'] >= $up)              return;          $used = 0;          $sql = $dbo->ExectueQuery(sprintf('SELECT * FROM `%stroop_t` WHERE `tid` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id']));          $undead = $this->_elixir->Number(6, ELIXIR_BAD, $up);          $temp = array('t1' => 0,'t2' => 0,'t3' => 0,'t4' => 0,'t5' => 0,'t6' => 0,'t7' => 0,              't8' => 0,'t9' => 0,'t10' => 0,'t11' => 0,'t12' => 0,'t13' => 0,'t14' => 0);          $save = false;          while($row = $dbo->Read($sql))          {              $modify = ($up > $row['end'] ? $row['end'] : $up);              $t = (int)floor(($modify - $row['start'])/$row['et']);              if($t <=0)                  continue;              if($undead)              {                  $temp['t'.$row['tt']] += $t;                  $save = true;              }                else              {                  $this->_data['t'.$row['tt']] += $t;                  $used += $row['pop'] * $t;                  $this->_data['used'] += $row['pop'] * $t;                  $this->_data['r5'] += $row['pop'] * $t * (($modify - $this->_data['modify'])/(ONE_TICK * 2));              }              $dbo->ExectueQuery(sprintf('UPDATE `%stroop_t` SET `start` =  `start` + \'%s\' WHERE `id`= \'%s\' LIMIT 1',                  DB_PERFIX, $t * $row['et'] , $row['id']));          }          $dbo->Cancel($sql);          if($undead and $save)              $this->AddUndead($temp);          $dbo->ExectueQuery(sprintf('UPDATE `%stroop_t` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `end` <= \'%s\'',              DB_PERFIX, $this->_data['id'], $up));          $this->_data['r5'] += $used  * ($up - $this->_data['modify']) / ( 2 * ONE_TICK);          $this->UpResource($up);          $this->UpElixirBuild($up);      }      protected function UpElixirBuild($up)      {          global $dbo;          $table = DB_PERFIX.'elixir_b';          $sql = sprintf('SELECT * FROM `%s` WHERE `tid` = \'%s\' AND `modify` <= \'%s\' AND `d` = \'0\' ORDER BY `modify` ASC',$table,$this->_data['id'],$up);          while($row = $dbo->ExectueRow($sql))          {              $this->_data['e'.$row['eid']] += $row['et'];              $this->DeleteRecord($table, $row['id']);          }      }      protected function TroopReturn(&$row)      {          global $dbo;          $up = false;          for($i=1;$i<15;$i++)          {              if($row['t'.$i])              {                  $up = true;                  break;              }          }          if($row['h'])              $up = true;          if($up)          {              $row['modify'] += $row['len'];              $row['kind'] = A_RETURN;              $row['d'] = 0;              $dbo->UpdateRow(DB_PERFIX.'troop_s', $row, $row['id']);          }          else              $this->DeleteRecord(DB_PERFIX.'troop_s', $row['id']);      }      protected function TroopBack($row)      {          for($i = 1;$i < 15; $i++)          {              $t = 't'.$i;              $this->_data[$t] += $row[$t];          }          if($row['h'])              $this->_data['h'] = '1';          $this->AddResource((int)$row['r1'],(int)$row['r2'],(int)$row['r3'],(int)$row['r4'],(int)$row['r5']);          $this->_elixir->AddEffect($row['e1'], ELIXIR_BAD, $row['ne1'], $row['modify'], $this->_data['pop']);          $this->_elixir->AddEffect($row['e2'], ELIXIR_BAD, $row['ne2'], $row['modify'], $this->_data['pop']);      }      protected function AddResource($r1, $r2, $r3, $r4, $r5)      {          $this->_data['r1'] += $r1;          if($this->_data['r1'] > $this->_data['l1'])              $this->_data['r1'] = $this->_data['l1'];            $this->_data['r2'] += $r2;          if($this->_data['r2'] > $this->_data['l1'])              $this->_data['r2'] = $this->_data['l1'];            $this->_data['r3'] += $r3;          if($this->_data['r3'] > $this->_data['l1'])              $this->_data['r3'] = $this->_data['l1'];            $this->_data['r4'] += $r4;          if($this->_data['r4'] > $this->_data['l1'])              $this->_data['r4'] = $this->_data['l1'];            $this->_data['r5'] += $r5;          if($this->_data['r5'] > $this->_data['l2'])              $this->_data['r5'] = $this->_data['l2'];      }      protected function SubResource(&$row, $carry, $clooney = false)      {          $point = $clooney ? 0.01 : 1;          if($carry <= 0)              return 0;          $brr = array('r1' => floor($this->_data['r1']),              'r2' => floor($this->_data['r2'] * $point),              'r3' => floor($this->_data['r3'] * $point),              'r4' => floor($this->_data['r4'] * $point),              'r5' => floor(($this->_data['r5'] > 0) ? ($this->_data['r5']  * $point) : 0));          $total = 0;          for($i = 1;$i<6;$i++)          {              $r = 'r'.$i;              $brr[$r] = floor($brr[$r] - $this->_data['hiding']);              if($brr[$r] < 0)                  $brr[$r] = 0;              $total += $brr[$r];          }          $need = 0;          if($total)          {              if($carry > $total)                  $carry = $total;              for($i = 1;$i < 6;$i++)              {                  $r = 'r'.$i;                  $row[$r] = (int)floor($carry * ($brr[$r] /$total));                  $this->_data[$r] -= $row[$r];                  $brr[$r] -= $row[$r];                  $need += $row[$r];              }              $carry -= $need;              while(($need < $total))              {                  if($carry <= 0)                      break;                  $j = 1;                  for($i = 1; $i < 6;$i++)                  {                      if($brr['r'.$i] > $brr['r'.$j])                          $j = $i;                  }                  $r = 'r'.$j;                  $m = ($brr[$r] - $need);                  $t = (int)($m > 0 ? $m : $brr[$r]);                  if($t > $carry)                      $t = $carry;                  $carry -= $t;                  $this->_data[$r] -= $t;                  $row[$r] += $t;                  $need += $t;                  $brr[$r] -= $t;              }          }          return $need;      }  }    class Updates extends TownUpdate  {      public function StartUpDate($tid,$up, $locks)      {          $this->_process = array(NO_PROCESS, 0);          $this->_updated = true;          $this->_destroyed = 0;          $this->_lock = $locks;          $this->Load($tid);          if(!$this->Lock())              return false;          if($this->_data['pid'] != $this->_account->id)          {              if(!$locks)                  $this->UnLock();              return false;          }          $this->UpBattle($up);          $this->Save(true);      }      public function StartMarket($up,$id)      {          $this->_process = array(MARKET_PROCESS, $id);          $this->_destroyed = 0;          $this->_updated = true;          $this->UpBattle($up);          return true;      }      public function StartBattle($up, $id)      {          $this->_process = array(BATTLE_PROCESS, $id);          $this->_updated = true;          $this->_destroyed = 0;          $this->UpBattle($up);          return true;      }      public function IsUpDated()      {          return $this->_updated;      }      protected function &GetBlocked($mid)      {          $arr = array();          global $dbo;          $sql = $dbo->ExectueQuery(sprintf('SELECT `b`.*,`a`.`kind`,`a`.`uid`, `t`.`up1`, `t`.`up2`, `t`.`up3`, `t`.`up4`, `t`.`up5`, `t`.`up6`, `t`.`up7`, `t`.`up8`, `t`.`up9`, `t`.`up9`, `t`.`up10`, `t`.`up11`,`t`.`mid` AS `tmid` FROM `%1$stroop_b` AS `b` LEFT JOIN `%1$saccount` AS `a` ON (`b`.`pid1` = `a`.`id`) LEFT JOIN `%1$stown` AS `t` ON (`b`.`tid1` = `t`.`id`) WHERE `b`.`mid` = \'%2$s\'  AND `b`.`d` = \'0\'', DB_PERFIX, $mid));          $i = 0;          while($row = $dbo->Read($sql))          {              $arr[$i]['kind'] = $row['kind'];              $arr[$i]['bt'] = new BattelTroop($row['kind']);              $arr[$i]['bt']->Load($row);              $arr[$i]['id'] = $row['id'];              $arr[$i]['pid'] = $row['pid1'];              $arr[$i]['tid'] = $row['tid1'];              $arr[$i]['uid'] = $row['uid'];              $arr[$i]['mid'] = $row['tmid'];              $arr[$i]['used'] = $arr[$i]['bt']->GetUsed();              $arr[$i]['undead'] = ($row['pid1'] == 7);              $arr[$i]['row'] = $this->CopyTroops($row);              if($arr[$i]['undead'])              {                  $trow = $dbo->ExectueScaler( sprintf('SELECT `mid1` FROM `%stroop_s` WHERE `pid1` = \'7\' AND `mid2` = \'%s\' AND `tid1` = \'%s\' AND `d` = \'0\' LIMIT 1',                      DB_PERFIX, $mid, $row['id']),'mid1');                  $arr[$i]['elixir'] = (is_null($trow) ? '0' : $trow);              }              $i++;          }          $dbo->Cancel($sql);          return $arr;      }      protected function Clooney(&$row, &$up1, &$up2)      {          global $dbo;          $event = array();          $report = array();          $clooney = new UpClooney();          if(!$clooney->Load($row['cid']))          {              $up1->_updated = false;              if(!is_null($up2))                  $up2->_updated = false;              return;          }          $row['e1'] = $row['e2'] = 0;          $bt1 = new BattelTroop($up1->_account->kind, $up1->_account);          $bt1->LoadRow($row, $up1->_data);          $bt2 = new BattelTroop(4);          if($this->IsPeace($row['modify']))          {              $report = array();              $report[-1] =  $bt1->GetReprot();              $report[0] = $bt2->GetReprot();              $event = array(sprintf('%s:%d', RE_FIRE_CASE, $row['modify']));              $this->_report->Attack($report,$row['pid1'],$row['pid2'],$row['tid1'],$row['tid2'],$row['mid1'],$row['mid2'],$row['cid'],                  $up1->_account->permission,(is_null($up2) ? 0 : $up2->_account->permission),$row['modify'],RE_WIN,RE_WIN, $event);              $row['r1']= $row['r2']= $row['r3']= $row['r4']= $row['r5'] = 0;              $this->TroopReturn($row);              $clooney->UnLock();              return;          }          $su = array();          if(!$clooney->tid)          {              $clooney->Update($row['modify']);              $bt2->LoadClooney($clooney);          }          else              $su = $this->GetSupport($row['mid2']);          $attaker = $bt1->AttackPoints(0,0,0,0);          $bt2->DefensePoints(0,0,0,0,$attaker,0);          $ap = $bt1->GetPoint('all');          $dpAll = $bt2->GetPoint('all');          $csu = count($su);          for($i = 1; $i < $csu; $i++)          {              $dpAll += $su[$i]['bt']->GetPoint('all');              $dpAll += $su[$i]['dp'] = $su[$i]['bt']->GetPoint('all');          }          $win = true;          if($ap ==0)              $ap = 1;          if($dpAll == 0)              $dpAll = 1;          $loseA = $ap /($ap + $dpAll);          $loseD = $dpAll/($ap + $dpAll);          $u1 = $bt1->GetUsed();          $u2 = $bt2->GetUsed();          $bt1->Battle($loseA,false);          $bt2->Battle($loseD,false);          $up1->_data['used'] -= ($u1 - $bt1->GetUsed());          $totalLose = $u2 - $bt2->GetUsed();          if($bt2->GetUsed())              $win = false;          $report[-1] = $bt1->GetReprot();          $report[0] = $bt2->GetReprot();          for($i = 0; $i < $csu; $i++)          {              $su[$i]['bt']->$bt2->Battle($loseD,false);              $t = $su[$i]['bt']->GetUsed();              $totalLose += ($su[$i]['used'] - $t);              if($up2->_account->uid and ($up2->_account->uid == $su[$i]['uid']))                  $this->AddHonor($su[$i]['pid'], $su[$i]['uid'], $t);              $su[$i]['bt']->SetTroops($su[$i]['row']);              $up2->SaveSupport($su[$i]['row'],$su[$i]['id'],$su[$i]['kind'],$su[$i]['used']);              if($t)                  $$win = false;              if(isset($report[$su[$i]['kind']]))              {                  $t = $su[$i]['bt']->GetReprot();                  $k = $su[$i]['kind'];                  for($j =1;$j<31;$j++)                      $report[$k][$j] += $t[$j];              }              else                  $report[$su[$i]['kind']] = $su[$i]['kind']->GetReprot();          }          if($row['h'])              $this->_account->AddHP($totalLose);          $bt1->SetTroops($row);          $bt2->SetClooney($clooney);          $win = (($ap > $dpAll)and $win);          $ra = $rd = RE_DEFEAT;          $up1->_account->AddAP($totalLose);          if(!is_null($up2))              $up2->_account->AddDP($u1 - $bt1->GetUsed());          if($bt1->GetUsed())          {              $ra = (($u1 == $bt1->GetUsed()) ? RE_WIN : RE_LOSSES);              $carry = CaryTroop($up1->_account->kind,$row);              if($carry)              {                  $row['r1']= $row['r2']= $row['r3']= $row['r4']= $row['r5'] = 0;                  if($row['h'])                      $carry += (int)floor(($up1->_account->hp3/100)*$carry);                  $plunder = 0;                  if($clooney->tid)                      $plunder = $up2->SubResource($row,$carry,true);                  elseif($clooney->tid != $up1->_data['id'])                      $plunder = $clooney->SubResource($row,$carry);                  if($plunder)                      $up1->_account->AddPlunder($plunder);                  $event[] = RE_RESOURCE.':'.$row['r1'].':'.$row['r2'].':'.$row['r3'].':'.$row['r4'].':'.$row['r5'].':'.$carry.':'.$plunder;              }              if($row['h'] and $win and ($up1->_data['pclo'] < 30))              {                  $pc = $dbo->ExectueRow(sprintf('SELECT `x`,`y` FROM `%smap_t` WHERE `id` = \'%s\'',                      DB_PERFIX, $clooney->mid));                  $pt = $dbo->ExectueRow(sprintf('SELECT `x`,`y` FROM `%smap_t` WHERE `id` = \'%s\'',                      DB_PERFIX, $up1->_data['mid']));                  if(dist($pc['x'],$pt['x'],$pc['y'],$pt['y']) <= sqrt(18))                  {                      $blvl = $this->GetLevel(31);                      $win =false;                      if($up1->_data['pclo'] == 0)                          $win = ($blvl >=10);                      if($up1->_data['pclo'] == 10)                          $win = ($blvl >=15);                      if($up1->_data['pclo'] == 20)                          $win =  ($blvl >=15);                      if($win)                      {                          $loyalty = rand(25,50);                          $clooney->loyalty = $clooney->loyalty - $loyalty;                          $event[] = sprintf('%s:%d',RE_LOYALTY, $loyalty);                          if(($clooney->loyalty < 1))                          {                              $event[] = sprintf('%s:%d', RE_CLOONEY_CAP, $row['mid2']);                              $clooney->loyalty = '1';                              if($clooney->tid)                                  $up2->_data['pclo'] -= 10;                              $clooney->pid = $up1->_account->id;                              $clooney->tid = $up1->_data['id'];                              $clooney->uid = $up1->_account->uid;                              $up1->_data['pclo'] += '10';                              $dbo->ExectueQuery(sprintf('UPDATE `%smap_t` SET `cap` = \'1\' WHERE `id` = \'%s\' LIMIT 1',                                  DB_PERFIX, $clooney->mid));                          }                      }                  }              }              $up1->TroopReturn($row);          }          else          {              $ra = RE_DEFEAT;              $up1->DeleteRecord(DB_PERFIX.'troop_s',$row['id']);          }          $clooney->tack = $clooney->tack + 1;          $clooney->modify = $row['modify'];          $clooney->Save();          if($dpAll)              $rd = (!$totalLose ? RE_WIN :                  (is_null($up2) ? RE_DEFEAT :                      (($up2->_data['used'] + $this->_used)? RE_LOSSES : RE_DEFEAT)));          $this->_report->Attack($report,$row['pid1'],$row['pid2'],$row['tid1'],$row['tid2'],$row['mid1'],$row['mid2'],$row['cid'],              $up1->_account->permission,(is_null($up2)? 0 : $up2->_account->permission),$row['modify'],$ra,$rd, $event);      }      protected function Undeadwar(&$up1, &$up2, &$bt1, &$bt2, &$su, $undead, $undeads, $modify,$hero)      {          $up = array('up1' => 0,'up2' => 0,'up3' => 0,'up4' => 0,'up5' => 0,'up6' => 0,              'up7' => 0,'up8' => 0,'up9' => 0,'up10' => 0,'up11' => 0);          $un = new BattelTroop(7);          $tun = array_sum($undeads);          if($tun > $undead)          {              $undead /= $tun;              for($i = 1;$i < 15;$i++)              {                  $t = 't'.$i;                  $undeads[$t] = (int)ceil($undeads[$t] * $undead);              }          }          $un->LoadRow($undeads,$up);          $kind = $un->AttackPoints(0,0,0,1);          $ap = $un->GetPoint('all');          $bt1->Reset();          $bt2->Reset();          $wall = $up2->WallPoint();          if($kind == 0)              $kind = 7;          $bt1->DefensePoints($wall, 0, 0, 0, $kind,0);          $bt2->DefensePoints($wall, 0, 0, 0, $kind,0);          $dp = $bt1->GetPoint('all');          $dp += $bt2->GetPoint('all');          $csu = count($su);          for($i = 0;$i<$csu;$i++)          {              $su[$i]['bt']->Reset();              $su[$i]['bt']->DefensePoints($wall,0,0,0,$kind,1);              $dp += $su[$i]['dp'] = $su[$i]['bt']->GetPoint('all');              $su[$i]['used'] = $su[$i]['bt']->GetUsed();          }            if($ap == 0)              $ap = 1;          if($dp == 0)              $dp = 1;          $loseA = ($ap - $dp)/($ap + $dp);          $loseD = ($dp - $ap)/($ap + $dp);          $report = array();          $undead = $un->GetUsed();          $un->Battle($loseA,false);          $u1 = $bt1->GetUsed();          $u2 = $bt2->GetUsed();          $bt1->Battle($loseD,false);          $bt2->Battle($loseD,false);          $report[-2] = $un->GetReprot();          $temp = array();          $temp['pid1'] = '7';          $temp['tid1'] = '7';          $temp['tid2'] = $up2->_data['id'];          $temp['pid2'] = $up2->_data['pid'];          $temp['mid2'] = $up2->_data['mid'];          $temp['mid1'] = $temp['cid'] = '0';          $temp['modify'] = $modify;          for($i = 0; $i < $csu;$i++)          {              $su[$i]['bt']->Battle($loseD,false);              $t1 = $su[$i]['bt']->GetUsed();              if($up2->_account->uid and ($up2->_account->uid == $su[$i]['uid']))                  $this->AddHonor($su[$i]['pid'], $su[$i]['uid'], ($su[$i]['used'] - $t1));              $su[$i]['bt']->SetTroops($su[$i]['row']);              $up2->SaveSupport($su[$i]['row'],$su[$i]['id'],$su[$i]['kind'],$su[$i]['used']);              if(isset($report[$su[$i]['kind']]))              {                  $t = $su[$i]['bt']->GetReprot();                  $k = $su[$i]['kind'];                  for($j =1;$j<31;$j++)                      $report[$k][$j] += $t[$j];              }              else                  $report[$su[$i]['kind']] = $su[$i]['bt']->GetReprot();              $this->_report->SaveSupport($temp,$su[$i]['pid'],$su[$i]['tid'],$su[$i]['bt']->GetReprot(),                  (($su[$i]['used'] == $su[$i]['bt']->GetUsed()) ? RE_WIN : (($su[$i]['bt']->GetUsed() == 0)?RE_DEFEAT : RE_LOSSES)),                      A_ATTACK);              $su[$i]['used'] = $t1;          }            $undead -= $un->GetUsed();          if($up2->_data['h'])              $up2->_account->AddHeroPoint($undead);          $up2->_account->AddDP($undead);          $up1->_account->AddDP($undead);          if($hero)              $up1->_account->AddHeroPoint($undead);          $un->SetTroops($undeads);          $bt2->SetTroops($up2->_data);          $up1->_data['used'] -= ($u1 - $bt1->GetUsed());          $up2->_data['used'] -= ($u2 - $bt2->GetUsed());          $report[-1] = $bt1->GetReprot();          $report[0] = $bt2->GetReprot();          if(!$up2->_data['won'])              $up2->AddUndead($undeads,$modify);            $this->_report->UnDeadAttack($report, $up1->_account->id, $up2->_account->id,              $up1->_data['id'],$up2->_data['id'],              $up2->_data['mid'],$modify,              ($bt1->GetUsed() ==0) ? RE_DEFEAT : (($bt1->GetUsed() == $u1) ? RE_WIN : RE_LOSSES),              ($bt2->GetUsed() ==0) ? RE_DEFEAT : (($bt2->GetUsed() == $u2) ? RE_WIN : RE_LOSSES));      }      protected function SubOneBuilding($modify,&$elixir_u)      {          global $dbo;          $building = $this->GetBuildingList(27);          $tar = array_rand($building);          $b = 'b'.$building[$tar];          $u = 'u'.$building[$tar];          $dbo->ExectueQuery(sprintf('UPDATE `%sbuilding_q` SET `d` =\'1\' WHERE `tid` = \'%s\' AND `bid` = \'%s\' AND `d` = \'0\'',DB_PERFIX,$this->_data['id'],$building[$tar]));          $info = $this->GetBuildingInfo($this->_data[$b],$this->_data[$u],$this->_data[$u]-1);          $elixir_u[] = sprintf('%s:%s:%s:%s',              RE_BUILDING_D, $this->_data[$b], $this->_data[$u],$this->_data[$u] - 1);          $this->SubInfo($building[$tar], $info, $this->_data[$u] - 1);          $temp = RE_RESOURCE;          $n = 0;          for($i = 1; $i <5; $i++)          {              $t = (int)floor($this->_data['r'.$i]);              $n += $t;              $temp .= ':'.$t;              $this->_data['r'.$i] = 0;          }            if($this->_data['r5'] >0)          {              $t = (int)floor($this->_data['r5']);              $this->_data['r5'] ='0';              $temp .= ':'.$t;              $n += $t;          }          else              $temp .= ':0';          $temp .= ':'.$n.':'.$n;          $elixir_u[] = $temp;          if(!$this->_data['pop'])          {              if(!$this->_data['cap'])                  $this->_destroyed = $modify;              $elixir_u[] = RE_DESTROY_TOWN.':'.$this->_data['mid'];          }      }      protected function SubInfo($bid,$info,$lvl)      {          if($lvl < 0)              $lvl = 0;          $this->_data['cp'] -= $info['cp'];          $this->_data['pop'] -= $info['pop'];          global $dbo;          $dbo->ExectueQuery(sprintf('UPDATE `%sbuilding_q` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `bid` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id'], $bid));          switch($this->_data['b'.$bid])          {              case 1:              case 2:              case 3:              case 4:              case 5:                  $this->_data['p'.$bid] -= $info['func'];                  if($this->_data['p'.$bid] <= 0)                      $this->_data['p'.$bid] = '2';                  break;              case 7:                  $this->_data['l1'] -=$info['func'];                  break;              case 8:                  $this->_data['l2'] -= $info['func'];                  break;              case 10:                  $this->_data['hiding'] -= $info['func'];                  break;              case 24:                  if($this->_account->uid)                  {                      if($lvl < 3)                      {                          $dbo->ExectueQuery(sprintf('UPDATE `%sunion_b` SET `limits` = \'0\' WHERE `id` = \'%s\' AND `tid` = \'%s\'',                              DB_PERFIX,$this->_account->uid,$this->_data['id']));                      }                      else                      {                          $dbo->ExectueQuery(                              sprintf('UPDATE `%sunion_b` SET `limits` = \'%d\' WHERE `id` = \'%s\' AND `tid` = \'%s\'',                                  DB_PERFIX, ((abs($lvl - $this->_data['u'.$bid]) - 2)*5) + 10,                                  $this->_account->uid, $this->_data['id']));                      }                  }                  break;              case 28:                  $tworker = $this->_data['workers'];                  $this->_data['workers'] -= $info['func'];                  for($i = 1;$i<6;$i++)                  {                      $w = 'w'.$i;                      $this->_data[$w] = (int)floor($this->_data[$w] * ($this->_data['workers']/$tworker));                  }                  break;          }          $this->_data['u'.$bid] = $lvl;          if(!$this->_data['u'.$bid])              $this->_data['b'.$bid] = '0';      }      protected function Battle(&$row, &$up1, &$up2)      {          $bt1 = new BattelTroop($up1->_account->kind,$up1->_account);          $bt1->LoadRow($row, $up1->_data);          $bt2 = new BattelTroop($up2->_account->kind, $up2->_account);                    if($this->IsPeace($row['modify']))          {              $report = array();              $report[-1] =  $bt1->GetReprot();              $report[0] = $bt2->GetReprot();              $elixir_u = array(sprintf('%s:%d', RE_FIRE_CASE, $row['modify']));              $this->_report->Attack($report,$row['pid1'],$row['pid2'],$row['tid1'],$row['tid2'],$row['mid1'],$row['mid2'],$row['cid'],                  $up1->_account->permission,$up2->_account->permission,$row['modify'],RE_WIN,RE_WIN, $elixir_u);              $row['e1'] = $row['e2'] = 0;              $this->TroopReturn($row);              return;          }          $bt2->Load($up2->_data);          $a_elixir = array(0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 =>0, 5 =>0, 6 =>0, 7 =>0,              8 =>0, 9 =>0, 10 =>0, 11 =>0, 12 =>0, 13 =>0, 14 =>0);          $d_elixir = $this->_elixir->GetElixir($row['modify']);          $elixir_u = array();          $a_elixir[$row['e1']] = $row['ne1'];          $a_elixir[$row['e2']] = $row['ne2'];          for($i = 1;$i <15; $i++)          {              if($a_elixir[$i])                  $elixir_u[] = sprintf('%s:%s:%s:%s', RE_ELIXIR_A, $i, ELIXIR_GOOD, $a_elixir[$i]);              if($d_elixir[$i])                  $elixir_u[] = sprintf('%s:%s:%s:%s', RE_ELIXIR_D, $i, ($d_elixir[$i] > 0) ? ELIXIR_GOOD : ELIXIR_BAD, abs($d_elixir[$i]));          }          $row['e1'] = $row['ne2'] = $row['ne1'] = $row['ne1'] = 0;          if($a_elixir[1])              $up2->_elixir->AddEffect(1,ELIXIR_BAD,$a_elixir[1],$row['modify']);          $kind = $bt1->AttackPoints(0, $a_elixir[5] - $d_elixir[4], $a_elixir[8],              ($up2->_data['h'] ? ($up2->_account->hhp4 / 100) : 0));          $wall = $up2->WallPoint();          $ap = $bt1->GetPoint('all');          if($ap == 0)              $ap = 1;          $bt2->DefensePoints($wall,              $d_elixir[4] - $d_elixir[5], $d_elixir[9], 0, $kind,              ($up2->_data['h'] ? ($up2->_account->hhp4 / 100) : 0));          $dp = $bt2->GetPoint('all');          if($dp == 0)              $dp = 1;          if($ap == 0)              $ap = 1;          $u1 = $bt1->GetUsed();          $u2 = $bt2->GetUsed();          $su = $this->GetSupport($row['mid2']);          $csu = count($su);          for($i=0; $i < $csu; $i++)          {              $su[$i]['bt']->DefensePoints($wall,0,0,0,$kind,1);              $dp += $su[$i]['dp'] = $su[$i]['bt']->GetPoint('all');          }          $win = ($ap > $dp);          if($row['kind'] == A_ATTACK)          {              $loseA = ($ap - $dp)/($ap + $dp);              $loseD = ($dp - $ap )/($ap + $dp);          }          else          {              $loseA = ($ap / ( $ap + $dp));              $loseD = ($dp / ( $ap + $dp));          }            $bt1->Battle($loseA, false);          $bt2->Battle($loseD, false);          $totalLose = ($u2 - $bt2->GetUsed());          $report = array();          $report[-1] = $bt1->GetReprot();          $report[0] =  $bt2->GetReprot();          $undead = 0;          $undeads = array('t1' => 0, 't2' => 0, 't3' => 0, 't4' => 0, 't5' => 0, 't6' => 0, 't7' => 0,              't8' => 0, 't9' => 0, 't10' => 0, 't11' => 0, 't12' => 0, 't13' => 0, 't14' => 0, 'h' =>0);          if($a_elixir[6] or ($d_elixir[6] > 0))          {              $undead = $bt1->AddUndead($undeads);              $undead += $bt2->AddUndead($undeads);          }                    for($i = 0; $i < $csu; $i++)          {              $su[$i]['bt']->Battle($loseD,false);              $t1 = $su[$i]['bt']->GetUsed();              $totalLose += ($su[$i]['used'] - $t1);              if($up2->_account->uid and ($up2->_account->uid == $su[$i]['uid']))                  $this->AddHonor($su[$i]['pid'], $su[$i]['uid'], ($su[$i]['used'] - $t1));              $su[$i]['bt']->SetTroops($su[$i]['row']);              $up2->SaveSupport($su[$i]['row'],$su[$i]['id'],$su[$i]['kind'],$su[$i]['used']);              if($a_elixir[6] or $d_elixir[6])                  $undead += $su[$i]['bt']->AddUndead($undeads);              if(isset($report[$su[$i]['kind']]))              {                  $t = $su[$i]['bt']->GetReprot();                  $k = $su[$i]['kind'];                  for($j =1;$j<31;$j++)                      $report[$k][$j] += $t[$j];              }              else                  $report[$su[$i]['kind']] = $su[$i]['bt']->GetReprot();              $this->_report->SaveSupport($row,$su[$i]['pid'],$su[$i]['tid'],$su[$i]['bt']->GetReprot(),                  (($su[$i]['used'] == $su[$i]['bt']->GetUsed()) ? RE_WIN : (($su[$i]['bt']->GetUsed() == 0)?RE_DEFEAT : RE_LOSSES)),                  $row['kind']);              $su[$i]['used'] = $t1;          }          if($up1->_account->uid and ($up1->_account->uid == $up2->_account->uid))              $up1->AddHonor($up1->_account->id, $up1->_account->uid, -$totalLose);          if(($row['kind'] == A_ATTACK) and ($up1->_data['pid'] != 7))              $up2->UseadMachin($up1, $up2, $row, $elixir_u, ($ap/($dp + $ap)));          $up1->_account->AddAP($totalLose);          $up2->_account->AddDP($u1 - $bt1->GetUsed());          if($row['h'])              $up1->_account->AddHeroPoint($totalLose);          if($up2->_data['h'])              $up2->_account->AddHeroPoint($u1 - $bt1->GetUsed());          $bt1->SetTroops($row);          $bt2->SetTroops($up2->_data);          $up1->_data['used'] -= ($u1 - $bt1->GetUsed());          $up2->_data['used'] -= ($u2 - $bt2->GetUsed());          if($bt1->GetUsed() and ($row['pid1'] != 7))          {              $carry = CaryTroop($up1->_account->kind,$row);              if($carry)              {                  $row['r1']= $row['r2']= $row['r3']= $row['r4']= $row['r5'] = 0;                  if($row['h'])                      $carry += (int)floor(($up1->_account->hp3/100)*$carry);                  $plunder = $up2->SubResource($row,$carry);                  if($plunder)                  {                      $up1->_account->AddPlunder($plunder);                      $up2->_account->AddPlunder(-$plunder);                  }                  $elixir_u[] = RE_RESOURCE.':'.$row['r1'].':'.$row['r2'].':'.$row['r3'].':'.$row['r4'].':'.$row['r5'].':'.$carry.':'.$plunder;              }              if($row['t13'] and ($row['kind'] == A_ATTACK) and !$up2->_data['cap'])              {                  $loyalty = (int)round(15,(int)(45 * ($row['t13'] / 2 )));                  $elixir_u[] = sprintf('%s:%d',RE_LOYALTY, $loyalty);                  $up2->_data['loyalty'] -= $loyalty;                  if($up2->_data['loyalty'] < 1)                  {                      if($up1->_account->HaveCP() and (!$up1->_data['tid2'] or !$up1->_data['tid1']))                      {                          $up2->_account->AddPop(-$up2->_data['pop']);                          $up2->_account->SetTown($up2->_data['id']);                          $up2->_data['pid'] = $up1->_account->id;                          $up2->_data['uid'] = $up1->_account->uid;                          $up2->_data['res_u'] = '1';                          $up2->_data['res_e'] = '0';                          for($i = 1; $i < 12;$i++)                              $up2->_data['up'.$i] = '0';                          $up1->SetAccount($up1->_account);                          $up2->_data['loyalty'] = 1;                          $up2->DeleteAllRecord();                          $elixir_u[] = sprintf('%s:%s', RE_CAP,$up2->_data['mid']);                          if(!$up1->_data['tid1'])                              $up1->_data['tid1'] = $up2->_data['id'];                          if(!$up1->_data['tid2'])                              $up1->_data['tid2'] = $up2->_data['id'];                          $row['t13']--;                          if($row['t13'] < 0)                              $row['t13'] = 0;                      }                      else                          $up2->_data['loyalty'] = 1;                  }              }              $this->MultiHunter($row['r1'], $row['r2'], $row['r3'], $row['r4'], $row['r5'], $row['pid1'], $row['pid2'],$row['modify']);          }          if($d_elixir[1] > 0 and $bt1->GetUsed())          {              $row['e1'] = 1;              $row['ne1'] = ((($bt1->CountTroop() * 5) > $d_elixir[1]) ? $d_elixir[1] : ($bt1->CountTroop() * 5));              $up2->_elixir->SubElixir(1,ELIXIR_GOOD,$row['ne1']);              $up2->_elixir->SetEnding(1,ELIXIR_GOOD,$row['modify']);              $elixir_u[] = sprintf('%s:%s:%s:%s', RE_ELIXIR_A, 1, ELIXIR_BAD,  $row['ne1']);          }          $ra = ($bt1->GetUsed() ? (($bt1->GetUsed() == $u1)?RE_WIN : RE_LOSSES) : RE_DEFEAT);          $rd = (!$totalLose ? RE_WIN : (($up2->_used + $up2->_data['used']) ? RE_LOSSES : RE_DEFEAT));          if(($a_elixir[6] or $d_elixir[6]) and ($row['pid1'] != 7))          {              $this->_report->Attack($report,$row['pid1'],$row['pid2'],$row['tid1'],$row['tid2'],$row['mid1'],$row['mid2'],$row['cid'],                  $up1->_account->permission,$up2->_account->permission,$row['modify'],                  $ra,                  $rd, $elixir_u);              $up2->Undeadwar($up1 ,$up2, $bt1,$bt2,$su,                  ($a_elixir[6]  + $d_elixir[6]), $undeads, $row['modify'],$row['h']);              $bt1->SetTroops($row);          }          elseif($row['pid1'] != 7)              $this->_report->Attack($report,$row['pid1'],$row['pid2'],$row['tid1'],$row['tid2'],$row['mid1'],$row['mid2'],$row['cid'],                  $up1->_account->permission,$up2->_account->permission,$row['modify'],                  $ra,                  $rd, $elixir_u);          if($row['pid1'] == 7)          {              if($bt1->GetUsed())                  $up2->SubOneBuilding($row['modify'],$elixir_u);              $this->_report->Attack($report, '7', $row['pid2'], $row['tid2'], $row['tid2'], $row['mid1'], $row['mid1'], $row['cid'],                  0, $up2->_account->permission, $row['modify'],                  $ra,                  $rd, $elixir_u);              $this->DeleteRecord(DB_PERFIX.'troop_b',$row['mid1']);              $this->DeleteRecord(DB_PERFIX.'elixir_e',$row['len']);          }          if($a_elixir[13] and $bt1->GetUsed())              $up2->_elixir->AddEffect(13, ELIXIR_BAD, $a_elixir[13], $row['modify'], $up2->_data['pop']);          if($bt1->GetUsed() and ($up1->_data['pid'] != 7))          {              if($up2->_destroyed)              {                  $row['pid2'] = '0';                  $row['tid2'] = '0';              }              $up1->TroopReturn($row);          }          else              $up1->DeleteRecord(DB_PERFIX.'troop_s',$row['id']);      }      protected function UseadMachin(&$up1,&$up2,&$row,&$elixir_u,$point)      {          if($point < 0.1)              return;          global $dbo;          if($row['t8'])          {              $lvl = 0;              $tar = 0;              if($row['tar'])              {                  for($i = 1; $i < 26; $i++)                  {                      if($row['tar'] == $up2->_data['b'.$i])                      {                          $tar = $i;                          break;                      }                  }              }              $cat = (($row['t8'] * (1 + $up1->_data['up8']))/100) * $point;              if(!$tar)              {                  $buildings = $up2->GetBuildingList();                  if(empty($buildings))                      $cat = 0;                  else                  {                      $t = array_rand($buildings);                      $tar = $buildings[$t];                  }              }              $b = 'b'.$tar;              $u = 'u'.$tar;              if($cat <= GetRandom())                  $cat = 0;              if($cat != 0)              {                  $strong = ($up2->_data[$u] + ($up2->_data[$u] * ($up2->_account->hp11/100)));                  $lvl = (int)round($strong -  $cat);                  if($lvl < 0)                      $lvl = 0;                  if($lvl < $up2->_data[$u])                  {                      $info = $up2->GetBuildingInfo($up2->_data[$b], $up2->_data[$u], $lvl);                      $elixir_u[] = sprintf('%s:%s:%s:%s',                          RE_BUILDING_D, $up2->_data[$b], $up2->_data[$u],$lvl);                      $up2->SubInfo($tar,$info,$lvl);                  }                  else                      $elixir_u[] = sprintf('%s:%s:%s:%s',                          RE_BUILDING_D, $up2->_data[$b], $up2->_data[$u],$up2->_data[$u]);              }              else                  $elixir_u[] = sprintf('%s:%s:%s:%s',                      RE_BUILDING_D,$up2->_data[$b], $up2->_data[$u], $up2->_data[$u]);          }          if($row['t9'] and $up2->_data['u27'])          {              $cat = (($row['t9'] * (1 + $up1->_data['up9']))/50) * $point;              if($cat <  GetRandom())                  $cat = 0;              if($cat != 0)              {                  $strong = ($up2->_data['u27'] + ($up2->_data['u27'] * ($up2->_account->hp11/100)));                  $lvl = (int)round($strong -  $cat);                  if($lvl < 0)                      $lvl = 0;                  if($lvl < $up2->_data['u27'])                  {                      $info = $up2->GetBuildingInfo(27,$up2->_data['u27'],$lvl);                      $elixir_u[] = sprintf('%s:%s:%s:%s',                          RE_BUILDING_D,'27',$up2->_data['u27'],$lvl);                      $up2->SubInfo(27,$info,$lvl);                    }                  else                      $elixir_u[] = sprintf('%s:%s:%s:%s',                          RE_BUILDING_D,'27',$up2->_data['u27'],$up2->_data['u27']);              }              else                  $elixir_u[] = sprintf('%s:%s:%s:%s',                      RE_BUILDING_D,'27',$up2->_data['u27'],$up2->_data['u27']);          }          if($row['t10'] and !$up2->_data['u27'] and $up2->_data['u26'])          {              $cat = (($row['t10'] * (1 + $up1->_data['up10']))/25) * $point;              if($cat <  GetRandom())                  $cat = 0;              if($cat != 0)              {                  $strong = ($up2->_data['u26'] + ($up2->_data['u26'] * ($up2->_account->hp11/100)));                  $lvl = (int)round($strong -  $cat);                  if($lvl < 0)                      $lvl = 0;                  if($lvl != $up2->_data['u26'] )                  {                      $info = $up2->GetBuildingInfo(26,$up2->_data['u26'],$lvl);                      $elixir_u[] = sprintf('%s:%s:%s:%s',                          RE_BUILDING_D,'26',$up2->_data['u26'],$lvl);                      $up2->SubInfo(26, $info, $lvl);                  }                  else                      $elixir_u[] = sprintf('%s:%s:%s:%s',                          RE_BUILDING_D,'26',$up2->_data['u26'],$lvl);              }              else                  $elixir_u[] = sprintf('%s:%s:%s:%s',                      RE_BUILDING_D,'26',$up2->_data['u26'],$up2->_data['u26']);          }          if(!$up2->_data['pop'])          {              if(!$up2->_data['cap'])                  $up2->_destroyed = $row['modify'];              $elixir_u[] = RE_DESTROY_TOWN.':'.$up2->_data['mid'];          }      }      protected function BlockadeWar(&$row,&$up1,&$up2)      {          $blocked = &$up2->GetBlocked($up2->_data['mid']);          $bt = new BattelTroop($up1->_account->kind, $up1->_account);          $bt->LoadRow($row, $up1->_data);          $kind = $bt->AttackPoints(0,0,0,0);          $cb = count($blocked);          $dp = 0;          $ap = $bt->GetPoint('all');          for($i = 0; $i < $cb; $i++)          {              if($blocked[$i]['pid'] == $up1->_account->id)                  continue;              $blocked[$i]['bt']->DefensePoints(0,0,0,0,$kind,0);              $dp += $blocked[$i]['bt']->GetPoint('all');          }          if($ap == 0)              $ap = 1;          if($dp == 0)              $dp = 1;          $loseA = ($ap / ( $ap + $dp));          $loseD = ($dp / ( $ap + $dp));          $u1 = $bt->GetUsed();          $bt->Battle($loseA,false);          $ra = $rd = RE_LOSSES;          $report = array();          $attaker = $bt->GetReprot();          $totalKill = 0;          for($i = 0; $i < $cb; $i++)          {              if($blocked[$i]['pid'] == $up1->_account->id)                  continue;              $blocked[$i]['bt']->Battle($loseD,false);              if(isset($report[$blocked[$i]['kind']]))              {                  $t = $blocked[$i]['bt']->GetReprot();                  $k = $blocked[$i]['kind'];                  for($j =1;$j<31;$j++)                      $report[$k][$j] += $t[$j];              }              else                  $report[$blocked[$i]['kind']] = $blocked[$i]['bt']->GetReprot();              $dead = $blocked[$i]['used'] - $blocked[$i]['bt']->GetUsed();              $this->_report->BlockadeWar($row,(($blocked[$i]['bt']->GetUsed() == 0) ? RE_DEFEAT :                      (($blocked[$i]['bt']->GetUsed() == $blocked[$i]['used']) ? RE_WIN : RE_LOSSES)),                  $blocked[$i]['pid'],                  $blocked[$i]['tid'],$attaker,$blocked[$i]['bt']->GetReprot(),true);              $totalKill += $dead;              if($blocked[$i]['uid'] and ($blocked[$i]['uid'] == $up2->_account->uid))                  $this->AddHonor($blocked[$i]['pid'], $blocked[$i]['uid'], -$dead);              $blocked[$i]['bt']->SetTroops($blocked[$i]['row']);              $up2->SaveBlockade($blocked[$i]['row'],                  $blocked[$i]['id'],$blocked[$i]['kind'],$blocked[$i]['tid'],$blocked[$i]['used']);          }          $up1->_account->AddAP($totalKill);          $this->_report->BlockadeWar($row, (($u1 == $bt->GetUsed() ? RE_WIN : ($bt->GetUsed() == 0 ? RE_DEFEAT : RE_LOSSES))), $row['pid1'],              $row['tid1'],$attaker,$report,false);          if($row['h'])              $up1->_account->AddHeroPoint($totalKill);          $bt->SetTroops($row);          $up1->_data['used'] -= ($u1 - $bt->GetUsed());      }      protected function UpdateMarket($up)      {          global $dbo;          $sql = sprintf('SELECT * FROM `%smarket` WHERE (`tid1` = \'%s\' OR `tid2` = \'%s\') AND `d` = \'0\' AND `modify` <= \'%s\' ORDER BY `modify` ASC',              DB_PERFIX, $this->_data['id'], $this->_data['id'], $up);          $table = DB_PERFIX.'market';          while($row = $dbo->ExectueRow($sql))          {              if(!$this->_updated)                  break;              if(($this->_process[0] == MARKET_PROCESS) and ($this->_process[1] == $row['id']))                  break;              if($row['kind'] == MARKET_RETURN)              {                  $this->DeleteRecord($table,$row['id']);                  continue;              }              if(($_SERVER['REQUEST_TIME'] + MAX_PROCESS_TIME) < time())              {                  $this->_updated = false;                  break;              }              $up1 = NULL;              $up2 = NULL;              if(!$this->StartProcess($up1, $up2,$row,false))              {                  $this->_updated = false;                  break;              }              if(!$this->Lock2Town($up1,$up2))              {                  $this->_updated = false;                  break;              }              $c = ($this->_blockade ? ($this->IsPeace($row['modify']) ? 1:  0.8) : 1);              $this->AddResource($row['r1'] * $c,$row['r2'] * $c,$row['r3'] * $c, $row['r4']* $c, $row['r5']* $c);              $this->MultiHunter($row['r1'], $row['r2'], $row['r3'], $row['r4'], $row['r5'], $row['pid1'], $row['pid2'],$row['modify']);              $this->_report->AddMarketReport($row, $up1->_data['mid'], $up2->_data['mid'], $c != 1);              if($up >= $row['modify'] + $row['len'])                  $this->DeleteRecord($table, $row['id']);              else              {                  $row['kind'] = MARKET_RETURN;                  $row['modify'] = $row['modify'] + $row['len'];                  $dbo->UpdateRow($table, $row, $row['id']);              }              $this->UnLock2Town($up1,$up2);              gc_collect_cycles();          }          if($this->_updated and ($this->_data['modify'] < $up))          {              if($this->Lock())              {                  $this->UpBuilding($up);                  $this->Save(true);              }          }      }      protected function StartProcess(&$up1, &$up2, $row, $battle)      {          if($this->_data['id'] == $row['tid1'])          {              $up1 = $this;              if($row['pid2'])              {                  if($row['tid2'] == $this->_data['id'])                      $up2 = $this;                  else                  {                      if($this->_data['pid'] != $row['pid2'])                          $ac = new Account($row['pid2']);                      else                          $ac =& $this->_account;                      $up2 =  new Updates($ac);                      $up2->Load($row['tid2']);                  }              }          }          else          {              $up2 = $this;              if($row['tid1'] == $this->_data['id'])                  $up1 = $this;              else              {                  if($this->_data['pid'] == $row['pid1'])                      $ac =& $this->_account;                  else                      $ac = new Account($row['pid1']);                  $up1 = new Updates($ac);                  $up1->Load($row['tid1']);              }          }          if($battle)          {              if($up1->_data['id'] == $this->_data['id'])                  $up1->StartMarket($row['modify'], $row['id']);              else                  $up1->StartBattle($row['modify'], $row['id']);              if(!is_null($up2))              {                  if($up2->_data['id'] == $this->_data['id'])                      $up2->StartMarket($row['modify'],$row['id']);                  else                      $up2->StartBattle($row['modify'],$row['id']);              }          }          else          {              if($up1->_data['id'] == $this->_data['id'])              {                  if(!$up1->Lock())                      return false;                }          }          return true;      }      protected function HeroAdventure(&$row)      {          global $troops;          global $dbo;          $r = GetRandom();          $arr = array();          $life = abs(($this->_account->lvl > 40 ? mt_rand(0, $this->_account->lvl - 40) : mt_rand(0, 30)));          $ex = mt_rand(10,($this->_account->lvl * 2) + 10);          $arr[0] = RE_HERO_LIFE.':'.$life;          $arr[1] = RE_HERO_EXP.':'.$ex;          $life = $this->_account->life - $life;          $win = $life ? RE_LOSSES : RE_WIN;            if($life < 1)          {              $arr[2]= RE_NOTHING.':0';              $this->_account->SetFields(array('exp'=> $ex,'life' => '0'),true);              $this->_report->HeroAdventure($row['pid1'], $row['tid1'], RE_DEFEAT, $arr, $row['modify']);              $this->DeleteRecord(DB_PERFIX.'troop_s',$row['id']);              return;          }          if($r <= 0.14)          {              $e = mt_rand(1,15);              $en = mt_rand(1,($this->_account->lvl * 5) + 10);              $arr[2] = sprintf('%s:%d:%d',RE_ELIXIR_F, $e, $en);              $this->_data['e'.$e] += $en;          }          elseif($r <= 0.28)          {              $e = mt_rand(1,ceil($this->_account->lvl / 10) + 1);              $en = mt_rand(3,($this->_account->lvl * 5) + 10);              $arr[2] = sprintf('%s:%d:%d',RE_TROOPS_F, $e, $en);              $this->_data['used'] += $troops[$this->_account->kind][$e][8]* $en;              $row['t'.$e] = $en;          }          elseif($r <= 0.42)          {              $en = $this->_account->lvl * 10;              $e = mt_rand($en + 100,($en * 2) + 500 );              $arr[2] = sprintf('%s:%d',RE_RESOURCE, $e);              $row['r1'] = $row['r2'] = $row['r3'] = $row['r4'] = $row['r5'] = $e;          }          elseif($r<= 0.56)          {              $t = $dbo->ExectueRow(sprintf('SELECT * FROM `%sserver_info` WHERE `com` = \'%s\'',DB_PERFIX,HERO_ITEM_FREE));              $l = mt_rand(1,(int)round(($this->_account->lvl +20)/10));              if(!$l)                  $l = 1;              if($l > 10)                  $l = 10;              $brr = array();              $brr['pid'] = $row['pid1'];              $brr['lvl'] = $l;              if($l > 3)              {                  for($i=1; $i <= $l; $i++)                      $brr['t'.mt_rand(1,$l + 2)] = mt_rand($l, $l*20);              }              if($l > 3)              {                  $brr['r'] =  mt_rand($l*50, $l*70);              }              if($l > 6)              {                  $brr['e'] = mt_rand(1,14);                  $brr['en'] = mt_rand($l, $l*5);              }              $dbo->InsertRow(DB_PERFIX.'hero_tm',$brr);              $brr = array('tid' => $dbo->InsertedID());              $arr[2] = RE_MAP_FIND.':'.$brr['tid'];              $table = DB_PERFIX.'hero_tmi';              for($i = 1; $i <= $l;$i++)              {                  $brr['hid'] = mt_rand($t['kind'], $t['subkind']);                  $dbo->InsertRow($table, $brr);              }          }          elseif($r<= 0.70)          {              $arr[2] = $arr[1];              $ex += $ex;          }          elseif($r<= 0.84)          {              $arr['2'] = $arr[1];              $arr[2]= RE_NOTHING.':0';          }          else          {              $p = &$this->_account->GetPlus();              $m = mt_rand(100,($this->_account->lvl * 2) + 200);              $p->UseMoney($m,TRANING_PLUS,INCOMMING,$this->_account->id);              $arr[2] = RE_MONEY.':'.$m;              $this->_account->SetFields(array('m_b' => $m));          }          $this->_account->SetFields(array('exp'=> $ex,'life' => $life),true);          $this->_report->HeroAdventure($row['pid1'], $row['tid1'], $win, $arr, $row['modify']);          $this->TroopReturn($row);      }      protected function HeroTreasure(&$row)      {          global $dbo;          $tm = $dbo->ExectueRow(sprintf('SELECT * FROM `%shero_tm` WHERE `id` = \'%s\'',              DB_PERFIX, $row['mid2']));            if(empty($tm))          {              $this->TroopReturn($row);              return;          }          $life = ($tm['ac'] /$tm['lvl']) / 2;          $tlife = $this->_account->life *$life;          $info = array();          $info[0] = RE_HERO_LIFE.':'.round($life*100);          if($tlife < 1)          {              $tlife = '0';              $this->DeleteRecord(DB_PERFIX.'troop_s',$row['id']);              $info[1] = RE_NOTHING.':'.'0';          }          else          {              $l = (int)floor($tm['lvl'] / $tm['ac']);              $j = 1;              while($j <=$l)              {                  $it = $dbo->ExectueRow(sprintf('SELECT * FROM `%shero_tmi` WHERE `tid` = \'%s\'', DB_PERFIX, $row['mid2']));                  if(empty($it))                      break;                  $dbo->DeleteRecord(DB_PERFIX.'hero_tmi',$it['id']);                  if(!$dbo->AffectedRows())                      continue;                  $arr = array();                  $arr['pid'] = $this->_account->id;                  $arr['hid'] = $it['hid'];                  $info[count($info)] = RE_ITEM_FIND.':0';                  $dbo->InsertRow(DB_PERFIX.'hero_hi',$arr);                  $j++;              }              for($i = 1;$i<15;$i++)                  $row['t'.$i] = round($row['t'.$i]*$life);              $row['e1'] = $row['e1'] = $row['ne1'] = $row['ne2'] = 0;              $row['mid2'] = '0';              $this->TroopReturn($row);          }          $this->_account->SetFields(array('life' => $tlife));          $this->_report->HeroAdventure($row['pid1'],$row['id'], $this->_account->life < 1 ?RE_DEFEAT : RE_LOSSES, $info, $row['modify']);      }      protected function Merging(&$up1,&$up2, &$row)      {          if($up1->_data['pid'] != $up2->_data['pid'])          {              $this->TroopReturn($row);              return;          }          global $troops;          $used = 0;          for($i = 1; $i < 15;$i++)          {              $t = 't'.$i;              $up = 'up'.$i;              if(!$row[$t])                  continue;              if($i > 11)                  continue;              if($up1->_data[$up] != $up2->_data[$up])              {                  $temp[$t] = $row[$t];                  continue;              }              $used += ($troops[$up2->_account->kind][$i][8] * $row[$t]);              $up2->_data[$t] += $row[$t];              $row[$t] = 0;          }          if($row['h'])          {              $up2->_account->SetFields(array('htid' => $up2->_data['id']));              $up2->_data['h'] = '1';              $used += 1;          }          $up2->_data['used'] += $used;          $up1->_data['used'] -= $used;          $this->TroopReturn($row);        }      protected function WallPoint()      {          return ($this->GetLevel(26) * 0.025) +($this->GetLevel(27) * 0.025);      }      protected function Espial(&$row, &$up1, $up2)      {          if($row['cid'] and !$row['pid2'])          {              $this->TroopReturn($row);              return;          }            $bt1 = new BattelTroop($up1->_account->kind,              $up1->_account);          $bt1->LoadRow($row,$up2->_data);          $bt2 = ( $row['cid']? new BattelTroop(4) : new BattelTroop($up2->_account->kind,              $up2->_account));            $a_elixir = array(0, 1 =>0,2 => 0,3 => 0,4 => 0,5 => 0,6 => 0,7 => 0,8 => 0,9 => 0,10 => 0,11 => 0,12 => 0,13 => 0,14 => 0);          $d_elixir = $up2->_elixir->GetElixir($row['modify']);          $bt1->AttackPoints($a_elixir[11] - $d_elixir[12], 0, 0, 1);          $wall = $up2->WallPoint();          if(!$row['cid'])              $bt2->Load($up2->_data);          $bt2->DefensePoints($wall,0,0,-$a_elixir[12],0,1);            $su = $this->GetSupport($row['mid2'],true);          $csu = count($su);          $aspy = $bt1->GetPoint('spy');          $dspy = $bt2->GetPoint('spy');          for($i=0; $i< $csu; $i++)              $dspy +=  $su[$i]['point'] = $su[$i]['bt']->DefensePoints($wall,0,0,0,0,1);            $elixir_u = array();          for($i = 1; $i < 14; $i++)          {              if($a_elixir[$i])                  $elixir_u[] = sprintf('%s:%s:%s:%s', RE_ELIXIR_A, $i, ELIXIR_GOOD, $a_elixir[$i]);              if($d_elixir[$i])                  $elixir_u[] = sprintf('%s:%s:%s:%s', RE_ELIXIR_D, $i, ($d_elixir[$i] > 0) ? ELIXIR_GOOD : ELIXIR_BAD, abs($d_elixir[$i]));          }          $ra = $rd = RE_NO_REPORT;          $lose = abs(($aspy - $dspy)/($aspy + $dspy));          $win = $aspy > $dspy;          $u1 = $bt1->GetUsed();          $u2 = $bt2->GetUsed();          $bt1->Battle($win ? $lose : 0,true);          $bt2->Battle($win ? 0 : $lose, true);          $totalLose = $u2 - $bt2->GetUsed();          $report = array();          $report[-1] = $bt1->GetReprot();          $report[0] =  $bt2->GetReprot();          for($i = 0; $i < $csu; $i++)          {              $su[$i]['bt']->Battle($win ? 0 : $lose,true);              $t= ($su[$i]['used'] - $su[$i]['bt']->GetUsed());              if($su[$i]['uid'] and $su[$i]['uid'] == $up2->_account->uid)                  $this->AddHonor($su[$i]['pid'],$su[$i]['uid'],$t);              $up2->_used -= $t;              $totalLose += $t;              if(isset($report[$su[$i]['kind']]))              {                  $t = $su[$i]['bt']->GetReprot();                  $k = $su[$i]['kind'];                  for($j =1;$j<31;$j++)                      $report[$k][$j] += $t[$j];              }              else                  $report[$su[$i]['kind']] = $su[$i]['bt']->GetReprot();              $su[$i]['bt']->SetTroops($su[$i]['row']);              $up2->SaveSupport($su[$i]['row'],$su[$i]['id'],$su[$i]['kind'],$su[$i]['used']);          }          if($up1->_account->uid and ($up1->_account->uid == $up2->_account->uid))              $this->AddHonor($up1->_account->id,$up1->_account->uid,-$totalLose);            $up1->_account->AddAP($totalLose);          $up2->_account->AddDP($u1-$bt1->GetUsed());            if(!$row['cid'])          {              $bt2->SetTroops($up2->_data);              $up2->_data['used'] -= ($u2 - $bt2->GetUsed());          }            $up1->_data['used'] -= ($u1 - $bt1->GetUsed());          if($win)          {              $bt1->SetTroops($row);              if($dspy)              {                  if($d_elixir[12])                      $up2->_elixir->SetEnding(12, ELIXIR_GOOD, $row['modify']);                  if($d_elixir[1])                  {                      $row['e1'] = 1;                      if($d_elixir[1] > ($row['t7'] * 5))                      {                          $up2->_elixir->SubElixir(1, ELIXIR_GOOD, $row['t7'] * 5);                          $row['ne1'] = $row['t7'] * 5;                      }                      else                          $row['ne1']=  $d_elixir[1];                      $elixir_u[] = sprintf('%s:%s:%s:%s', RE_ELIXIR_A, 1, ELIXIR_BAD, $row['ne1']);                      $up2->_elixir->SetEnding(1, ELIXIR_GOOD, $row['modify']);                  }                  else                      $row['e1'] = $row['e2'] = $row['ne1'] = $row['ne2'] = 0;                  $rd = RE_DEFEAT;                  if($a_elixir[12])                  {                      $elixir_u[] = sprintf('%s:%s:%s:%s', RE_ELIXIR_D, 12, ELIXIR_BAD, $a_elixir[12]);                      $up2->_elixir->AddEffect(12,ELIXIR_BAD,$a_elixir[12],$row['modify']);                  }                }              else                  $rd = RE_NO_REPORT;                if($report[-1][7] - $report[-1][22])                  $ra = RE_LOSSES;              else                  $ra = RE_WIN;              if(!$row['cid'])              {                  $brr = array();                  for($i = 1;$i < 28; $i++)                  {                      $x = $i * 2;                      if($up2->_data['b'.$i])                      {                          $brr[$x - 1] = $up2->_data['b'.$i];                          $brr[$x] =  $up2->_data['u'.$i];                      }                  }                  $elixir_u[] = (RE_BUILDING_H.':'.implode(':',$brr));              }          }          else          {              $ra = RE_DEFEAT;              if($report[0][7] - $report[0][22])                  $rd = RE_LOSSES;              else                  $rd = RE_WIN;          }          if($win)              $up1->TroopReturn($row);          else              $this->DeleteRecord(DB_PERFIX.'troop_s', $row['id']);          $this->_report->Espial($row, $ra, $rd, $report, $elixir_u,              $up1->_account->permission, $up2->_account->permission);      }      protected function NewTown(&$row)      {          global $dbo;            if(!$this->_account->HaveCP())          {              $this->TroopReturn($row);              return;          }          if($this->_data['tid1'] and $this->_data['tid2'])          {              $this->TroopReturn($row);              return;          }          $tarr = array();          $tarr['pid'] = $row['pid1'];          $tarr['mid'] = $row['mid2'];          $tarr['uid'] = $this->_account->uid;          $tarr['name'] = $GLOBALS['lang']['NewTown'];          $tarr['modify'] = $row['modify'];          $dbo->InsertRow(DB_PERFIX.'town', $tarr);          $id = $dbo->InsertedID();          $dbo->ExectueQuery(              sprintf('UPDATE `%smap_t` SET `subid` = \'%s\' WHERE `id` = \'%s\' AND `subid` = \'0\'',                  DB_PERFIX, $id, $row['mid2']));          if(!$dbo->AffectedRows())          {              $dbo->DeleteRecord(DB_PERFIX.'town', $id);              $this->TroopReturn($row);          }          else          {              $this->_report->NewTown($row['pid1'],$row['mid1'],$row['tid1'],$row['mid2'],$id,$row['modify']);              if(!$this->_data['tid1'])                  $this->_data['tid1'] = $id;              elseif(!$this->_data['tid2'])                  $this->_data['tid2'] = $id;              $this->_account->AddPop(1);              $this->_data['used'] -= 1;              $this->DeleteRecord(DB_PERFIX.'troop_s',$row['id']);          }      }      protected function UpBattle($up)      {          global $dbo;          $this->UpFrozen($up);          $sql = sprintf('SELECT * FROM `%stroop_s` WHERE (`tid1` = \'%s\' OR `tid2` = \'%s\') AND `d` = \'0\' AND `modify` %s \'%s\' ORDER BY `modify` ASC',              DB_PERFIX,$this->_data['id'],$this->_data['id'],(($this->_process[0] != MARKET_PROCESS) ? '<=' : '<'),$up);          $table = DB_PERFIX.'troop_s';            while($row = $dbo->ExectueRow($sql))          {              if(!$this->_updated)                  break;              if(($this->_process[0] == BATTLE_PROCESS) and ($this->_process[1] == $row['id']))                  break;              if(($row['tid2'] < 7) and ($row['tid2'] != 0))              {                  $this->TroopReturn($row);                  continue;              }              if(($_SERVER['REQUEST_TIME'] + MAX_PROCESS_TIME) < time())              {                  $this->_updated = false;                  break;              }              $up1 = NULL;              $up2 = NULL;              if(!$this->StartProcess($up1, $up2, $row, true))              {                  $this->_updated = false;                  break;              }              if(!$this->Lock2Town($up1, $up2))              {                  $this->_updated = false;                  break;              }                if(!is_null($up2) and $up2->_destroyed)              {                  $this->UnLock2Town($up1,$up2);                  $this->TroopReturn($row);                  continue;              }              if($up1->_destroyed)              {                  $this->DeleteRecord($table,$row['id']);                  $this->UnLock2Town($up1, $up2);                  continue;              }              switch($row['kind'])              {                  case A_RETURN:                      if($this->IsPeace($row['modify']))                          $up1->TroopBack($row);                      elseif($up1->_blockade)                      {                          $up1->BlockadeWar($row, $up1, $up1);                          $up1->TroopBack($row);                      }                      else                          $up1->TroopBack($row);                      $this->DeleteRecord($table,$row['id']);                      break;                  case A_NEW_TOWN:                      $up1->NewTown($row);                      break;                  case A_SUPPORT:                      if($this->IsPeace($row['modify']))                          $up1->_data['used'] -= $up2->AddSupport($row, $up1->_account->kind);                      elseif($up2->_blockade)                      {                          $up2->BlockadeWar($row,$up1,$up2);                          if(($row['mid1'] == $row['mid2']))                              $up2->TroopReturn($row);                          else                              $up1->_data['used'] -= $up2->AddSupport($row, $up1->_account->kind);                      }                      else                          $up1->_data['used'] -= $up2->AddSupport($row, $up1->_account->kind);                      break;                  case A_BLOCKADE:                      $up2->AddBlockageRow($row);                      $temp = $this->_tempReport;                      $temp[0] = $up1->_account->kind;                      for($i = 1; $i <13;$i++)                      {                          $temp[$i] = $temp[$i + 15] = $row['t'.$i];                          $row['t'.$i] = '0';                      }                      $this->_report->SendBlockage($row,$temp);                      $this->TroopReturn($row);                      break;                  case A_ADVENTURE:                      $up1->HeroAdventure($row);                      break;                  case A_TREASURE:                      $up1->HeroTreasure($row);                      break;                  case A_MERGER:                      $this->Merging($up1,$up2,$row);                      break;                  case A_ESPIAL:                      $this->Espial($row,$up1,$up2);                      break;                  case A_ATTACK:                  case A_RAPINE:                      if($row['cid'])                          $this->Clooney($row, $up1, $up2);                      else                          $this->Battle($row, $up1, $up2);                      break;                  default:                      $this->TroopReturn($row);              }              $this->UnLock2Town($up1, $up2);              gc_collect_cycles();          }          if(!$this->_destroyed and $this->_updated and ($this->_data['modify'] <= $up))          {              $this->UpdateMarket($up);          }      }  }  ?>