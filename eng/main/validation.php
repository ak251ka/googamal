<?php  require_once('lib/dbo.php');  require_once('eng/main/union.php');  require_once('lib/form.php');  require_once('eng/sec/user.php');  require_once('lib/utility.php');  require_once('lib/defines.php');  require_once('eng/main/troop.php');  require_once('eng/main/town.php');  class Validation  {   public $_info;   protected $_error;   protected $_sitter;   protected $_used;   protected $_lowT;   protected $_lowTK;   public $disabled;   public $_distance;   public $_ec = array(0 => 0, 1 => 2, 2 => 0, 3 => 0, 4 => 5, 5 => 1, 6 => 3, 7 => 0, 8 => 1, 9 => 0, 10 => 1, 11 => 1, 12 => 2, 13 => 0.5, 14 => 0 ,15 => 1);   public function Start()   {    $this->_error = NO_ERROR;    $this->ValidPost();    $this->ValidTroops();    $this->ValidPoss();    $this->SetError();   }     protected function ValidPost()   {    global $town;    global $session;    $this->_sitter = $session->aid != $session->pid;    $_POST['kind'] = isset($_POST['kind']) ? ValidNumber($_POST['kind'], true) : 1;    $_POST['tbX'] = isset($_POST['tbX']) ? ValidNumber($_POST['tbX']) : 0;    $_POST['tbY'] = isset($_POST['tbY']) ? ValidNumber($_POST['tbY']) : 0;    $_POST['e1'] = isset($_POST['e1']) ? ValidNumber($_POST['e1'],true) : 0;    if($_POST['e1'] > ELIXIR_COMBIN)     $_POST['e1'] = 0;    $_POST['en1'] = isset($_POST['en1']) ? ValidNumber($_POST['en1'],true) : 0;    $_POST['e2'] = isset($_POST['e2']) ? ValidNumber($_POST['e2'],true) : 0;    if($_POST['e2'] > ELIXIR_COMBIN)     $_POST['e2'] = 0;    $_POST['en2'] = isset($_POST['en2']) ? ValidNumber($_POST['en2'],true) : 0;    $_POST['e3'] = isset($_POST['e3']) ? ValidNumber($_POST['e3'],true) : 0;    if($_POST['e3'] > ELIXIR_COMBIN)     $_POST['e3'] = 0;    $_POST['en3'] = isset($_POST['en3']) ? ValidNumber($_POST['en3'],true) : 0;    $_POST['en1'] = $_POST['en1'] > $town->HaveElixir($_POST['e1']) ? $town->HaveElixir($_POST['e1']) : $_POST['en1'];    $_POST['en2'] = $_POST['en2'] > $town->HaveElixir($_POST['e2']) ? $town->HaveElixir($_POST['e2']) : $_POST['en2'];    $_POST['en3'] = $_POST['en3'] > $town->HaveElixir($_POST['e3']) ? $town->HaveElixir($_POST['e3']) : $_POST['en3'];    $_POST['h'] = isset($_POST['h']) ? ($_POST['h'] ? $town->h : 0 ): 0;   }   protected function ValidTroops()   {    global $town;          global $account;          global $troops;          global $hero;    $this->_lowT = ($_POST['h'] ? $hero->GetPoint('SPEED') : PHP_INT_MAX);    $this->_lowTK = P_ON_CAVALRY;    $this->_used = 0;          $kind = $account->kind;    for($i = 1;$i < 15;$i++)    {     $t = 't'.$i;     $_POST[$t] = isset($_POST[$t]) ? ValidNumber($_POST[$t], true) : 0;     $_POST[$t] = $_POST[$t] > $town->$t ? $town->$t : $_POST[$t];     if(!$_POST[$t])      continue;     $this->_used += $_POST[$t];              if($troops[$kind][$i][5] > $this->_lowT)                  continue;              $this->_lowT = $troops[$kind][$i][5];     switch($i)     {                  case 1:                  case 2:                  case 7:                  case 12:                      $this->_lowTK = P_ON_INFANTRY;                      break;                  case 3:                  case 4:                      $this->_lowTK = P_ON_ARCHERS;                      break;                  case 5:                  case 6:                      $this->_lowTK = P_ON_CAVALRY;                      break;                  case 8:                  case 9:                  case 10:                      $this->_lowTK = P_ON_ALL_TROOP;                      break;                  case 11:                      $this->_lowTK = P_SPECIAL_FORCES;                      break;                  case 13:                      $this->_lowTK = P_ON_ALL_TROOP;                  case 14:                      $this->_lowTK = P_ON_ALL_TROOP;                      $_POST['t14'] = 1;                      break;     }    }   }   protected function  MatchElixir()   {          $this->ZeroElixir();    if($_POST['e1']!= ELIXIR_COMBIN)          {              $t = (int)floor($this->_used * $this->_ec[$_POST['e1']]);              if($t < $_POST['en1'])                  $_POST['en1'] = $t;          }          else          {              $t =(int)floor($this->_used * $this->_ec[$_POST['e1']]);              if($t < $_POST['en1'])                  $_POST['en1'] = $t;                $t =(int)floor($this->_used * $this->_ec[$_POST['e2']]);              if($t < $_POST['en2'])                  $_POST['en2'] = $t;                $t = (int)floor($_POST['en1'] * $this->_ec[$_POST['e2']]);              if($t < $_POST['en2'])                  $_POST['en2'] = $t;                $t =(int)floor($this->_used * $this->_ec[$_POST['e3']]);              if($t < $_POST['en3'])                  $_POST['en3'] = $t;                $t = (int)floor($_POST['en1'] * $this->_ec[$_POST['e3']]);              if($t < $_POST['en3'])                  $_POST['en3'] = $t;                $max = array();              $max[0] = (int)ceil($_POST['en2'] / $this->_ec[$_POST['e2']]);              $max[1] = (int)ceil($_POST['en3'] / $this->_ec[$_POST['e3']]);              if($_POST['en1'] > max($max))                  $_POST['en1'] = max($max);          }   }   protected function ValidPoss()   {    global $town;    global $account;    global $lang;    global $hero;    global $dbo;    global $union;          global $plus;    $this->_distance = 0;          if($this->_sitter and $_POST['kind'] > A_SUPPORT)          {              $_POST['kind'] = A_RAPINE;              $this->ZeroElixir(true);              $this->_error = $this->_error | E_ATTACK_SITTER;          }    if($_POST['kind'] != A_ATTACK and $_POST['kind'] != A_ESPIAL)     $this->ZeroElixir(true);    if($_POST['kind'] == A_ESPIAL)    {     $_POST['t1'] = $_POST['t2'] =      $_POST['t3'] = $_POST['t4'] =      $_POST['t5'] = $_POST['t6'] =      $_POST['t8'] = $_POST['t9'] =      $_POST['t10'] = $_POST['t11'] =      $_POST['t12'] = $_POST['t13'] =      $_POST['t14'] = $_POST['h'] = 0;     $this->_used = $_POST['t7'];     if($_POST['e1'] != ELIXIR_COMBIN)     {      $_POST['e2'] = $_POST['e3'] = $_POST['en2'] = $_POST['en3'] = 0;      if($_POST['e1'] != 11 and $_POST['e1'] != 12)       $_POST['e1'] = $_POST['en1'] = 0;      elseif($this->_used * $this->_ec[$_POST['e1']] < $_POST['en1'])       $_POST['en1'] =  $this->_used * $this->_ec[$_POST['e1']];     }     else     {      if(($_POST['e2'] != 11 and $_POST['e2'] != 12) or ($_POST['e3'] != 11 and $_POST['e3'] != 12))       $this->ZeroElixir(true);      else       $this->MatchElixir();     }    }    elseif($_POST['kind'] == A_ATTACK)    {     if($_POST['e1'] != ELIXIR_COMBIN)     {      $_POST['e2'] = $_POST['e3'] = $_POST['en2'] = $_POST['en3'] = 0;      if($_POST['e1'] == 11 and $_POST['e1'] == 12 or !$this->_ec[$_POST['e1']])       $this->ZeroElixir(true);                  else                      $this->MatchElixir();     }     else     {      if($_POST['e2'] == 11 or $_POST['e2'] == 12 or        $_POST['e3'] == 11 or $_POST['e3'] == 12)       $this->ZeroElixir(true);      else          $this->MatchElixir();     }    }    $this->_info = null;    if(!$this->_used and !$_POST['h'])     $this->_error = $this->_error | E_ATTACK_NO_TROOP;     $pos = $dbo->ExectueRow(sprintf('SELECT * FROM `%smap_t` WHERE `x` = \'%d\' and `y` = \'%d\'',       DB_PERFIX,$_POST['tbX'],$_POST['tbY']));      switch($pos['kind'])    {     case MAP_TOWN:     $this->_info = $dbo->ExectueRow(sprintf('SELECT `id` as `tid`,`name`,`pid`,`uid`,`mid`,`cap` FROM `%stown` WHERE `id` = \'%s\'',DB_PERFIX,$pos['subid']));     if(empty($this->_info))     {      $this->_info['pid'] = $this->_info['uid'] = $this->_info['tid'] = $this->_info['cap'] = 0;      $this->_info['mid'] = $pos['id'];      $this->_info['name'] = $lang['EmptyLand'];       }     $this->_info['cid'] = 0;     if($pos['subid'] == 0)     {      if($_POST['t14'] and !$this->_sitter)      {       for($i = 1;$i <14;$i++)        $_POST['t'.$i] ='0';       $_POST['h'] = '0';       $this->ZeroElixir(true);       $_POST['kind'] = A_NEW_TOWN;      }      else       $this->_error = $this->_error | E_ATTACK_EMPTY_LAND;     }     elseif($pos['subid'] == $town->id)     {      $_POST['kind'] = A_SUPPORT;      if(!$town->IsBlockade())       $this->_error = $this->_error | E_ATTACK_SELF;      else       $this->_distance = (int)ceil(ONE_TICK / 6) ;     }     else     {      if($this->_info['pid'] == $town->pid)      {                      if(($_POST['kind'] == A_MERGER) and !$this->_info['cap'])                          $this->_error = $this->_error | E_ATTACK_MERGE_SELF;       elseif(($_POST['kind'] == A_MERGER) and !$plus->HaveTalant(MERGINGE_TROOP))        $this->_error = $this->_error | E_ATTACK_MERGE_TALANT;       elseif(($_POST['kind'] != A_MERGER) and ($_POST['kind'] != A_SUPPORT))        $this->_error = $this->_error |  E_ATTACK_OWN;      }      elseif($union->IsAllay($account->uid, $this->_info['uid']) and $_POST['kind'] != A_SUPPORT)       $this->_error = $this->_error | E_ATTACK_ALLAY;     }     break;    case MAP_GAP:     $this->_info = array('name' => $lang['Gap'],'mid' => $pos['id'],'cid' => 0);     $this->_error = $this->_error |  E_ATTACK_GAP;      break;    case MAP_CLOONEY:     $this->ZeroElixir(true);     $this->_info = $dbo->ExectueRow(sprintf('SELECT `id` AS `cid`,`pid`,`tid`, `uid`,`mid` FROM `%sclooney` WHERE `id` = \'%s\'',DB_PERFIX,$pos['subid']));     if(!(($_POST['kind'] == A_SUPPORT or $_POST['kind'] == A_ESPIAL) and $this->_info['pid']))      $_POST['kind'] = A_RAPINE;     if($this->_info['pid'])     {      if($this->_info['pid'] == $town->pid and $_POST['kind'] != A_SUPPORT)       $this->_error = $this->_error | E_ATTACK_OWN;      elseif($union->IsAllay($this->_info['uid'],$account->uid) and $_POST['kind'] != A_SUPPORT)       $this->_error = $this->_error | E_ATTACK_ALLAY;      $this->_info['name'] = $lang['ClooneyCapture'];     }     else      $this->_info['name'] = $lang['Clooney'];     break;    }    if(!is_null($this->_info) and !$this->_distance)    {     $tPos = $dbo->ExectueRow(sprintf('SELECT `x`,`y` FROM `%smap_t` WHERE `id` = \'%s\'',DB_PERFIX,$town->mid));     $slow = MinSpeedTroop($account->kind,$_POST);              $dis = dist($pos['x'],$tPos['x'],$pos['y'],$tPos['y']);              if($slow['k'] == 0)              {                  $slow['sp'] = (($account->lvl + 1)/10) + 10;                  $slow['k'] = 3;              }     $this->_distance = $town->ReduceTheDistance($dis,$slow['k'],$slow['sp']);         }   }   public function ZeroElixir($force = false)   {    if($force)    {     $_POST['e1'] = $_POST['e2'] = $_POST['e3'] =     $_POST['en1'] = $_POST['en2'] = $_POST['en3'] = 0;     return;    }       if(!$_POST['en1'])    {     $_POST['e1'] = $_POST['e2'] = $_POST['e3'] =     $_POST['en1'] = $_POST['en2'] = $_POST['en3'] = 0;    }    elseif(!$_POST['en2'] or !$_POST['en3'])    {     $_POST['e2'] = $_POST['e3'] =     $_POST['en2'] = $_POST['en3'] = 0;     if($_POST['e1'] == ELIXIR_COMBIN)     {      $_POST['e1'] = $_POST['en1'] =  0;     }         }   }   protected function SetError()   {    global $user;          global $session;    $this->disabled = false;    if(($this->_error & E_ATTACK_NO_TROOP ) == E_ATTACK_NO_TROOP)     $this->disabled = true;    if(($this->_error & E_ATTACK_SITTER  ) == E_ATTACK_SITTER)     $this->disabled = true;    if(($this->_error & E_ATTACK_EMPTY_LAND ) == E_ATTACK_EMPTY_LAND)     $this->disabled = true;    if(($this->_error & E_ATTACK_SELF ) == E_ATTACK_SELF)     $this->disabled = true;    if(($this->_error & E_ATTACK_GAP ) == E_ATTACK_GAP)     $this->disabled = true;    if(($this->_error & E_ATTACK_OWN ) == E_ATTACK_OWN)     $this->disabled = true;    if(($this->_error & E_ATTACK_MERGE_TALANT ) == E_ATTACK_MERGE_TALANT)     $this->disabled = true;    if(($this->_error & E_ATTACK_MERGE_SELF ) == E_ATTACK_MERGE_SELF)     $this->disabled = true;    if($user->UnderProtection($this->_info['pid']))     $this->disabled = true;          $permission = 0;          switch($_POST['kind'])          {              case A_ATTACK:                  $permission = CAN_ATTACK;                  break;              case A_ESPIAL:                  $permission = CAN_ESPIAL;                  break;              case A_RAPINE:                  $permission = CAN_RAPINE;                  break;              case A_SUPPORT:                  $permission = CAN_SUPPORT;                  break;              CASE A_MERGER:                  $permission = OWNER;                  break;          }          if(!$session->Permission($permission))              $this->disabled = true;   }   public function ErrorString()   {    global $lang;    global $user;          global $session;    $temp = $this->_error ? '' : '&nbsp;';    if(($this->_error & E_ATTACK_NO_TROOP ) == E_ATTACK_NO_TROOP)     $temp .= $lang['E_ATTACK_NO_TROOP'].'<br />';    if(($this->_error & E_ATTACK_SITTER  ) == E_ATTACK_SITTER)     $temp .= $lang['E_ATTACK_SITTER'].'<br />';    if(($this->_error & E_ATTACK_EMPTY_LAND ) == E_ATTACK_EMPTY_LAND)     $temp .= $lang['E_ATTACK_EMPTY_LAND'].'<br />';    if(($this->_error & E_ATTACK_SELF ) == E_ATTACK_SELF)     $temp .= $lang['E_ATTACK_SELF'].'<br />';    if(($this->_error & E_ATTACK_GAP ) == E_ATTACK_GAP)     $temp .= $lang['E_ATTACK_GAP'].'<br />';    if(($this->_error & E_ATTACK_OWN ) == E_ATTACK_OWN)     $temp .= $lang['E_ATTACK_OWN'].'<br />';    if(($this->_error & E_ATTACK_ALLAY ) == E_ATTACK_ALLAY)     $temp .= $lang['E_ATTACK_ALLAY'].'<br />';    if(($this->_error & E_ATTACK_MERGE_TALANT ) == E_ATTACK_MERGE_TALANT)     $temp .= $lang['E_ATTACK_MERGE_TALANT'].'<br />';    if(($this->_error & E_ATTACK_MERGE_SELF ) == E_ATTACK_MERGE_SELF)     $temp .= $lang['E_ATTACK_MERGE_SELF'].'<br />';    if($user->UnderProtection($this->_info['pid']))     $temp .= $lang['UnderProtection'].'<br />';          $permission = 0;          switch($_POST['kind'])          {              case A_ATTACK:                  $permission = CAN_ATTACK;                  break;              case A_ESPIAL:                  $permission = CAN_ESPIAL;                  break;              case A_RAPINE:                  $permission = CAN_RAPINE;                  break;              case A_SUPPORT:                  $permission = CAN_SUPPORT;                  break;              CASE A_MERGER:                  $permission = OWNER;                  $$temp .= sprintf('%s %s %d',$lang['Cost'],$lang['Merger'],MERGINGE_TROOP);                  break;          }          if(!$session->Permission($permission))              $temp .= $lang['NoPermission'].'<br />';    return $temp;   }  }  $Validation = new Validation;  ?>