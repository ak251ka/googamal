<?php  require_once('lib/config.php');  require_once('lib/dbo.php');  require_once('lib/object.php');  require_once('lib/utility.php');  require_once('eng/main/account.php');  require_once('eng/main/plus.php');  require_once('eng/main/clooney.php');  require_once('lib/defines.php');    class Town extends Object  {   protected $_lock;   protected $_account;   protected $_product;   protected $_building;   protected $_elixir;   protected $_b;   protected $_d;   protected $_frozen;   protected $_used;   public function  __construct(&$arr, &$account)   {    parent::__construct($arr);    $this->_account = &$account;    if($this->IsLoad())     $this->Load();   }   public function GetProduct()   {    return $this->_product;   }   protected function Load()   {    $this->SetProduct();    $this->LoadData();    $this->_lock = false;   }   public function SetProduct()   {          $this->Frozen();          if($this->_dummy)          {              $this->_product = array('r1' => 0,'r2' => 0,'r3' => 0,'r4' => 0,'r5' => 0);              return;          }    $plus = $this->_account->GetPlus();    $this->_product = array();          if($this->_frozen)          {              $p1 = $p2 = 0;          }          else          {              $p1 = 1;              $p2 = $p1 += $this->_data['pclo'] / 100;          }      for($i = 1;$i < 5; $i++)    {     $p1 = $p2;     $w = "w$i";     $p = "p$i";     $r = "r$i";     if($plus->HavePlus($r))      $p1 += PLUS_RESOURCE_POINT;     $this->_product[$r] = ($this->_data[$p]* $p1) + ($this->_data[$p] * $this->_data[$w] * $p1 * WORKER_POINT);    }          if(!$this->_frozen)          {              $p1 = $p2;              for($i=7;$i<26;$i++)                  if($this->_data['b'.$i] == 29 or $this->_data['b'.$i] == 30)                      $p1 += ($this->_data['u'.$i]*0.0125);              if($plus->HavePlus('r5'))                  $p1 += PLUS_RESOURCE_POINT;          }          else              $p1 = 1;      $this->_product['r5'] = ($this->_data['p5'] * $p1) + ($this->_data['p5'] * $this->_data['w5'] * $p1 * WORKER_POINT);    $this->_product['r5'] = $this->_product['r5'];   }   protected function LoadData()   {        global $dbo;    $sql = $dbo->ExectueQuery(sprintf('SELECT `eid`, SUM(`num`) AS `num`, `kind` FROM `%selixir_e` WHERE `tid` = \'%s\' AND `d` = \'0\' GROUP BY `eid`,`kind` ', DB_PERFIX, $this->_data['id']));    while($row = $dbo->Read($sql))     $this->_elixir[$row['eid']][$row['kind']] = $row['num'];    $dbo->Cancel($sql);    gc_collect_cycles();    $this->_d = 0;    $this->_b = 0;    $sql = $dbo->ExectueQuery(sprintf('SELECT * FROM `%sbuilding_q` WHERE `tid` = \'%s\'  AND `d` = \'0\'', DB_PERFIX, $this->_data['id']));    while($row = $dbo->Read($sql))    {     $this->_building[$row['bid']] = new Object($row);     if($row['kind'])      $this->_d++;     else      $this->_b++;    }    gc_collect_cycles();    $dbo->Cancel($sql);    $this->_used = $dbo->ExectueScaler(sprintf('SELECT  SUM(`used`) as `used` FROM `%stroop_su` WHERE `tid2` = \'%s\' AND `d` = \'0\'',      DB_PERFIX, $this->_data['id']),'used');          $e = 0;    if(isset($this->_elixir[1][ELIXIR_BAD]))     $e -= $this->_elixir[1][ELIXIR_BAD];      if(isset($this->_elixir[2][ELIXIR_GOOD]))     $e +=$this->_elixir[2][ELIXIR_GOOD];          $hp = 1;          if($this->_account->htid == $this->_data['id'])          {              if($this->_account->life > 1)                  $hp = (1 - ($this->_account->hp8/100));          }          $tused = (($this->_used + $this->_data['used']) * $hp);          if($e > 0)              $tused -= ($e > $tused ? $tused / 2 : $e /2);          else          {              $e = abs($e);              $tused += ($e > $tused ? $tused / 2 : $e /2);          }          $this->_used = $tused;   }   public function GetUsed()   {          if($this->_dummy)              return 0;    return ($this->_used + $this->_data['pop']);   }   public function Update($up)   {    global $dbo;    return true;   }   public function HaveEnough($r1,$r2,$r3,$r4,$r5)   {    if(!$this->IsLoad())     return false;    return $this->_data['r1'] >= $r1 and $this->_data['r2'] >= $r2 and $this->_data['r3'] >= $r3 and     $this->_data['r4'] >= $r4 and $this->_data['r5'] >= $r5;   }   public function SubResource($r1,$r2,$r3,$r4,$r5)   {    if(!$this->HaveEnough($r1,$r2,$r3,$r4,$r5))     return false;    $this->_data['r1'] = (float)$this->_data['r1'] - $r1;    $this->_data['r2'] = (float)$this->_data['r2'] - $r2;    $this->_data['r3'] = (float)$this->_data['r3'] - $r3;    $this->_data['r4'] = (float)$this->_data['r4'] - $r4;    $this->_data['r5'] = (float)$this->_data['r5'] - $r5;    $arr = array();    $arr['r1'] = $this->_data['r1'];    $arr['r2'] = $this->_data['r2'];    $arr['r3'] = $this->_data['r3'];    $arr['r4'] = $this->_data['r4'];    $arr['r5'] = $this->_data['r5'];    $this->SetField($arr);    return true;   }   public function AddResource($r1,$r2,$r3,$r4,$r5)   {    $arr = array();    $this->_data['r1'] = $this->_data['r1'] + $r1;    $this->_data['r2'] = $this->_data['r2'] + $r2;    $this->_data['r3'] = $this->_data['r3'] + $r3;    $this->_data['r4'] = $this->_data['r4'] + $r4;    $this->_data['r5'] = $this->_data['r5'] + $r5;    if($this->_data['l1'] < $this->_data['r1'])     $this->_data['r1'] = $this->_data['l1'];    if($this->_data['l1'] < $this->_data['r2'])     $this->_data['r2'] = $this->_data['l1'];    if($this->_data['l1'] < $this->_data['r3'])     $this->_data['r3'] = $this->_data['l1'];    if($this->_data['l1'] < $this->_data['r4'])     $this->_data['r4'] = $this->_data['l1'];    if($this->_data['l2'] < $this->_data['r5'])     $this->_data['r5'] = $this->_data['l2'];    $arr['r1'] = $this->_data['r1'];    $arr['r2'] = $this->_data['r2'];    $arr['r3'] = $this->_data['r3'];    $arr['r4'] = $this->_data['r4'];    $arr['r5'] = $this->_data['r5'];    $this->SetField($arr);   }   public function GetCanUseElixir($type)   {    $list = array();    global $dbo;    $one = 1;    $sql = $dbo->ExectueQuery(sprintf('SELECT * FROM `%selixir_i` WHERE `kind` & \'%u\'',DB_PERFIX,$type));    while($row = $dbo->Read($sql))    {     if(($this->_data['res_e'] & ($one << $row['id'] - 1))or ($this->_data['e'.$row['id']] > 0))     {      $list[$row['id']] = new Object($row);      $list[$row['id']]->num = $this->_data['e'.$row['id']];     }    }    $dbo->Cancel($sql);    return $list;   }   public function IsBlockade()   {          if($this->_dummy)              return 0;    global $dbo;    return $dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%stroop_b` WHERE `tid2` = \'%s\'  AND `d` = \'0\'',      DB_PERFIX, $this->_data['id']), 'c');   }   public function HaveElixir($id)   {    $id = ValidNumber($id,true);    if(!$id or $id > ELIXIR_COMBIN)     return 0;    return $this->_data['e'.$id];   }   public function ReduceTheDistance($distance, $k, $sp)   {    $hero = $this->_account->GetHero();    $point = 1;    $point += $hero->SpeedTroop($k, $this->_data['id']);    $blvl = $this->GetLevel(25);    if($blvl != -1)     $point += $blvl * 0.0125;    $x = ($distance * ONE_TICK) / $sp;    if($x > ONE_TICK and ($point != 0))     $x = ONE_TICK + ((($distance - $sp)*ONE_TICK) / ($sp * $point));    return ceil($x);   }   public function ReFrozen()   {    global $dbo;     $this->_frozen =      $dbo->ExectueScaler(      sprintf('SELECT `modify` FROM `%selixir_e` WHERE `tid` = \'%s\' AND `eid` = \'13\'  AND `d` = \'0\'',        DB_PERFIX,        $this->_data['id'] ), 'modify');   }   public function Frozen()   {          if($this->_dummy)              $this->_frozen = false;    if(is_null($this->_frozen))    {     global $dbo;     $this->_frozen =       $dbo->ExectueScaler(       sprintf('SELECT `modify` FROM `%selixir_e` WHERE `tid` = \'%s\' AND `eid` = \'13\' AND `d` = \'0\'',        DB_PERFIX,         $this->_data['id'] ), 'modify');    }    return is_null($this->_frozen) ? false : $this->_frozen;   }   public function &ElixirEffect()   {    $list = array();          if($this->_dummy)              return $list;    global $dbo;    $sql = $dbo->ExectueQuery(sprintf('SELECT `e`.`eid` , `e`.`kind` , `i`.`name` , `ed`.`desc`, MIN(`e`.`modify`) as `modify` FROM `%1$selixir_e` AS `e` LEFT JOIN `%1$selixir_i` AS `i` ON ( `e`.`eid` = `i`.`id` )LEFT JOIN `%1$selixir_ed` AS `ed` ON ( `e`.`eid` = `ed`.`eid` AND `e`.`kind` = `ed`.`kind` ) WHERE `e`.`tid` =\'%2$s\' AND `e`.`d` = \'0\' GROUP BY `e`.`eid` , `e`.`kind`',              DB_PERFIX, $this->_data['id']));    $i = 0;    while($row = $dbo->Read($sql))     $list[$i++] = new Object($row);    $dbo->Cancel($sql);    return $list;   }   public function &BuildingList()   {    global $dbo;    $arr = array();          if($this->_dummy)              return $arr;          $sql = $dbo->ExectueQuery(sprintf('SELECT * FROM `%sbuilding_q` WHERE `tid` = \'%s\' AND `d` = \'0\'',DB_PERFIX,$this->_data['id']));    while($row = $dbo->Read($sql))     $arr[$row['id']] = new Object($row);    $dbo->Cancel($sql);    gc_collect_cycles();    return $arr;       }   public function GetBuildingInfo($bid)   {    global $dbo;    return $dbo->ExectueRow(sprintf('SELECT * FROM `%sbuilding_i` WHERE `id` = \'%s\'',DB_PERFIX,$bid));   }   public function GetBuildingLevel($bid,$lvl)   {    global $dbo;    return $dbo->ExectueRow(sprintf('SELECT * FROM `%sbuilding_d` WHERE `bid` = \'%s\' AND `lvl` = \'%s\'',DB_PERFIX,$bid, $lvl));   }   public function IsBuild($bid)   {    global $dbo;    return $dbo->ExectueScaler(     sprintf('SELECT COUNT(*) AS `c` FROM `%sbuilding_q` WHERE `tid` = \'%s\' AND `bid` = \'%s\' AND `d` = \'0\'',      DB_PERFIX,$this->_data['id'],$bid),'c');   }   public function GetLevel($bid)   {    for($i = 1;$i < 28; $i++)    {     $b = "b$i";     $u = "u$i";     if($this->_data[$b] == $bid)      return $this->_data[$u];    }    return -1;   }   public function DestroyBuilding($id, $plus)   {    if($this->Frozen())     return;      if($this->_d)    {     if( $this->_d ==2 or !$plus)      return;    }    $b = "b$id";    $u = "u$id";        if($this->IsBuild($id))     return;    $row = $this->GetBuildingLevel($this->_data[$b], $this->_data[$u]);    $this->AddToQueue($id, $this->_data[$u] - 1, DES_BUILDING,$row['times'],$row['cp'],      $row['func'], $row['pop']);   }   public function CanBuild($pop)   {    global $dbo;    $tpop = $dbo->ExectueScaler(     sprintf('SELECT SUM(`pop`) AS `s` FROM `%sbuilding_q` WHERE `tid` = \'%s\' AND `kind` = \'%s\' AND `d` = \'0\'',      DB_PERFIX, $this->_data['id'], UP_BUILDING),'s');      return $this->_product['r5'] - ($tpop + $this->_data['pop']) > $pop;   }   public function IsBuilding()   {    global $dbo;    return $dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%sbuilding_q` WHERE `tid` = \'%s\' AND `d` = \'0\' AND `kind` = \'%s\'',     DB_PERFIX, $this->_data['id'],UP_BUILDING),'c');   }   public function BuildBuilding($sid, $bid, $lvl ,$plus)   {    if($this->Frozen())     return false;      $build = $this->IsBuilding();    if($build)    {     if( $build == 2 or !$plus)      return false;    }    $row = $this->GetBuildingLevel($bid, $lvl);    if(empty($row))     return;    if(!$this->HaveEnough($row['r1'], $row['r2'], $row['r3'], $row['r4'], $row['r5']))     return;    if($bid == 5 and  $this->IsBuild($sid))     return;    elseif($bid != 5 and ($this->IsBuild($sid) or !$this->CanBuild($row['pop'])))     return;    if($this->SubResource($row['r1'], $row['r2'], $row['r3'], $row['r4'], $row['r5']))    {     $this->AddToQueue($sid, $lvl, UP_BUILDING, $row['times'], $row['cp'], $row['func'], $row['pop']);     return true;    }    return false;   }   protected function AddToQueue($bid,$lvl,$kind,$times, $cp, $func = 0, $pop = 0)   {    global $dbo;    $arr = array();    $b = 'b'.$bid;    $arr['tid'] = $this->_data['id'];    $arr['bid'] = $bid;    $arr['kind'] = $kind;    $arr['lvl'] = $lvl;    $arr['cp'] = $cp;    $arr['func'] = $func;    $arr['pop'] = $pop;    $len = $this->BuildSpeed($bid, $times);    $arr['modify'] = (int)$_SERVER['REQUEST_TIME'] + $len;    $dbo->InsertRow(DB_PERFIX.'building_q',$arr);   }   public function BuildSpeed($bid,$time)   {    $hero = $this->_account->GetHero();    $build = $time - ($time * $this->_data['u6'] * 0.03);    if($bid < 6)     $build = $build - ($build * $hero->GetPoint(4) / 100);    else     $build = $build - ($build * $hero->GetPoint(5) / 100);    return (int)ceil($build);   }   public function CancelBuild($id)   {    $id = ValidNumber($id, true);    global $dbo;    $row = $dbo->ExectueRow(sprintf('SELECT * FROM `%sbuilding_q` WHERE`id` = \'%s\' AND `tid` = \'%s\' AND `d` = \'0\'',     DB_PERFIX, $id, $this->_data['id']));    if(empty($row))     return;    if($row['modify'] <= $this->_data['modify'])     return;    if(!$this->Lock())     return;    $b = 'b'.$row['bid'];    $u = 'u'.$row['bid'];    if($this->_data[$u] == 0)    {     $this->_data[$b] = '0';     $this->SetField(array($b => '0'));    }    $dbo->DeleteRecord(DB_PERFIX.'building_q',$id);    $this->UnLock();   }   public function CountBuild()   {    return $this->_b;   }   public function CountDestory()   {    return $this->_d;   }   public function TrainTroop($bid,$tt,$len,$num,$r1,$r2,$r3,$r4,$r5,$pop)   {    global $dbo;          $one = 1;          if(!in_array($tt,array(1,13,14)))          {              if(!($this->_data['res_u'] & ($one << ($tt - 1))))                  return;          }    if(!$this->SubResource($r1*$num,$r2*$num,$r3*$num,$r4*$num,$r5*$num))     return;    $arr = array();    $last = $dbo->ExectueScaler(sprintf('SELECT MAX(`end`) as `m` FROM `%stroop_t` WHERE `tid` = \'%s\' AND `bid` = \'%s\' AND `d` = \'0\'',     DB_PERFIX,$this->_data['id'], $bid),'m');    $last = $last ? $last : $_SERVER['REQUEST_TIME'] ;    if($last < $_SERVER['REQUEST_TIME'])     $last = $_SERVER['REQUEST_TIME'];    $len = round($len);      $arr['tid'] = $this->_data['id'];      $arr['pid'] = $this->_account->id;      $arr['bid'] = $bid;      $arr['tt'] = $tt;      $arr['pop'] = $pop;      $arr['et'] = $len;    $arr['start'] = $last;    $arr['end'] = floor($last + ($len * $num));    $dbo->InsertRow(DB_PERFIX.'troop_t',$arr);   }   public function Research($id, $r1, $r2, $r3, $r4, $r5, $bt, $kind)   {    $this->SubResource($r1, $r2, $r3, $r4, $r5);    $arr = array();    $arr['tid'] = $this->_data['id'];    $arr['pid'] = $this->_data['pid'];    $arr['kind'] = $kind;    $arr['subkind'] = $id;    $arr['modify'] = $bt;    global $dbo;    $dbo->InsertRow(DB_PERFIX.'research',$arr);   }   public function BuildElixir($id,$num, $r1, $r2, $r3, $r4, $r5, $bt)   {    global $dbo;    $last = $dbo->ExectueScaler(sprintf('SELECT MAX(`modify`) AS `m` FROM `%selixir_b` WHERE `tid` = \'%s\' AND `d` =\'0\'',     DB_PERFIX,$this->_data['id']),'m');    $arr = array();    if(!$this->HaveEnough($r1,$r2,$r3,$r4,$r5))     return;    $this->SubResource($r1,$r2,$r3,$r4,$r5);        $last = $last?  $last : $_SERVER['REQUEST_TIME'];    if($last < $_SERVER['REQUEST_TIME'])     $last = $_SERVER['REQUEST_TIME'];    $arr['tid']= $this->_data['id'];    $arr['pid']= $this->_data['pid'];    $arr['eid']= $id;    $arr['et'] = $num;    $arr['modify']  = $last +$bt;    $dbo->InsertRow(DB_PERFIX.'elixir_b',$arr);   }   public function SendElixir($id, &$arr)   {    global $dbo;    $pid = $dbo->ExectueScaler(sprintf('SELECT `pid` FROM `%stown` WHERE `id` = \'%s\'',DB_PERFIX, $id),'pid');    if(empty($pid))     return false;    if(!$this->Lock())     return false;    if($pid != $this->_data['pid'])    {     $ta = new Account($pid);     $tt = $ta->GetTown($id);     if(!$tt->Lock())     {      $this->UnLock();      return false;     }     }    else    {     $tt = $this->_account->GetTown($id);     if(!$tt->Lock())     {      $this->UnLock();      return false;     }    }    $sql = '';    $crr = array();    $b = false;    foreach($arr as $key => $value)    {     $e = 'e'.$key;     if($this->_data[$e] - $value < 0)      continue;     $this->_data[$e] =  $this->_data[$e] - $value;     $crr[$e] = $this->_data[$e];     if($b)      $sql .= ", `$e` = `$e` + '$value'";     else     {      $b = true;      $sql = "`$e` = `$e` + '$value'";     }    }    $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET %s WHERE `id` = \'%s\'',DB_PERFIX,$sql,$id));    $this->SetField($crr);    $tt->UnLock();    $this->UnLock();    return true;   }   public function SendResource($id, $r1, $r2, $r3, $r4, $r5, $len, $car)   {    global $dbo;    $arr = array();    $arr['tid1'] = $this->_data['id'];    $arr['pid1'] = $this->_data['pid'];    $arr['tid2'] =$id;    $arr['pid2'] =$dbo->ExectueScaler(sprintf('SELECT `pid` FROM `%stown` WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX,$id),'pid');    $arr['kind'] = MARKET_SEND;    $arr['r1'] = $r1;    $arr['r2'] = $r2;    $arr['r3'] = $r3;    $arr['r4'] = $r4;    $arr['r5'] = $r5;    $arr['tr'] = $car;    $arr['len'] = $len;    $arr['modify'] = $_SERVER['REQUEST_TIME'] + $len;    $dbo->InsertRow(DB_PERFIX.'market', $arr);   }   public function ProposalResource($pr1, $pr2, $r1, $r2, $tr, $sp)   {    global $dbo;     $brr = array(1 =>0, 2 =>0, 3 =>0, 4 =>0, 5 =>0);    $brr[$pr1] = $r1;    if(!$this->HaveEnough($brr[1],$brr[2],$brr[3],$brr[4],$brr[5]))     return;    $this->SubResource($brr[1],$brr[2],$brr[3],$brr[4],$brr[5]);    $arr = array();    $pos = $dbo->ExectueRow(sprintf('SELECT `x`,`y` FROM `%smap_t` WHERE `id` = \'%s\'',     DB_PERFIX, $this->_data['mid']));    $arr['tid1'] = $this->_data['id'];    $arr['pid1'] = $this->_data['pid'];    for($i = 1;$i<6;$i++)     $arr['r'.$i] = $brr[$i];    $arr['tr'] = $tr;    $arr['kind'] = MARKET_WAIT;    $dbo->InsertRow(DB_PERFIX.'market',$arr);    $id = $dbo->InsertedID();    $arr = array();    $arr['tid'] = $this->_data['id'];    $arr['pid'] = $this->_data['pid'];    $arr['mid'] = $id;    $arr['x'] = $pos['x'];    $arr['y'] = $pos['y'];    $arr['tr1'] = $pr1;    $arr['tr2'] = $pr2;    $arr['r1'] = $r1;    $arr['r2'] = $r2;    $arr['sp'] = $sp;    $dbo->InsertRow(DB_PERFIX.'market_p',$arr);    gc_collect_cycles();   }   public function CancelProposalResource($id)   {    global $dbo;    $row = $dbo->ExectueRow(sprintf('SELECT * FROM `%smarket_p` WHERE `id` =\'%d\' AND `tid` = \'%s\'',     DB_PERFIX, $id, $this->_data['id']));    if(empty($row))     return;    $dbo->ExectueQuery(sprintf('DELETE FROM `%smarket_p` WHERE `id` = \'%s\'', DB_PERFIX, $row['id']));    if(!$dbo->AffectedRows())     return;    $arr = array(1 =>0, 2 =>0, 3 =>0, 4 =>0, 5 =>0);    $arr[$row['tr1']] = $row['r1'];    $this->AddResource($arr[1],$arr[2],$arr[3],$arr[4],$arr[5]);    $dbo->ExectueQuery(sprintf('DELETE FROM `%smarket` WHERE `id` = \'%s\' AND `kind` = \'%s\'', DB_PERFIX, $row['mid'], MARKET_WAIT));   }   public function AcceptProposalResource($id)   {    global $dbo;    $row = $dbo->ExectueRow(sprintf('SELECT * FROM `%smarket_p` WHERE `id` = \'%s\'',DB_PERFIX,$id));    if(empty($row))     return;    $taccount = new Account($row['pid']);    if(!$taccount->UpdateTown((int)$_SERVER['REQUEST_TIME'],$row['id']))     return;       }   public function UseElixir($id, $num)   {       }   public function SetField($Fileds)   {    global $dbo;    $dbo->UpdateRow(DB_PERFIX.'town', $Fileds, $this->_data['id']);   }   public function ExteraResource()   {    $arr = array();    $pro = $this->GetProduct();    foreach ($pro as &$p)     $p = $p * EXTERA_RESOURCE;    $this->_data['r1'] = $this->_data['r1'] + $pro['r1'];    $this->_data['r2'] = $this->_data['r2'] + $pro['r2'];    $this->_data['r3'] = $this->_data['r3'] + $pro['r3'];    $this->_data['r4'] = $this->_data['r4'] + $pro['r4'];    $this->_data['r5'] = $this->_data['r5'] + $pro['r5'];    if($this->_data['l1'] < $this->_data['r1'])     $this->_data['r1'] = $this->_data['l1'];    if($this->_data['l1'] < $this->_data['r2'])     $this->_data['r2'] = $this->_data['l1'];    if($this->_data['l1'] < $this->_data['r3'])     $this->_data['r3'] = $this->_data['l1'];    if($this->_data['l1'] < $this->_data['r4'])     $this->_data['r4'] = $this->_data['l1'];    if($this->_data['l2'] < $this->_data['r5'])     $this->_data['r5'] = $this->_data['l2'];    $arr['r1'] = $this->_data['r1'];    $arr['r2'] = $this->_data['r2'];    $arr['r3'] = $this->_data['r3'];    $arr['r4'] = $this->_data['r4'];    $arr['r5'] = $this->_data['r5'];    $arr['br'] = (int)$_SERVER['REQUEST_TIME'] + ONE_TICK * 24;    $this->_data['br'] = $arr['br'];    $this->SetField($arr);   }   public function AddFields($Fileds)   {    global $dbo;    $set = '';    $b = false;    foreach ($Fileds as $key => $value)    {     if($b)      $set .= ' , ';     else      $b = true;     if($key == 'h')      $set .= '`h` = \''.$value.'\'';     else      $set .= '`'.$key.'` = `'.$key.'` + \''.$value.'\'';          $this->_data[$key] += $value;    }    $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET %s WHERE `id` = \'%s\' LIMIT 1;',DB_PERFIX, $set, $this->_data['id']));    gc_collect_cycles();   }   public function FindTreasure($id)   {   }   public function GetName($id)   {    global $dbo;    return $dbo->ExectueScaler(sprintf('SELECT `name` FROM `%stown` WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX,$id),'name');   }   public function Lock()   {    global $dbo;    if($this->_lock)     return true;    $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `locks` = \'1\' WHERE `id` = \'%s\' AND `locks` = \'0\' LIMIT 1',DB_PERFIX,$this->id));    $this->_lock = $dbo->AffectedRows();    if($this->_lock)     $this->_data = $dbo->ExectueRow(sprintf('SELECT * FROM `%stown` WHERE `id` = \'%s\'', DB_PERFIX,$this->_data['id']));          unset($this->_data['locks']);          unset($this->_data['name']);    return $this->_lock;   }   public function UnLock()   {    global $dbo;    if(!$this->_lock)     return;    $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `locks` = \'0\' WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX,$this->id));   }   public function IsLock()   {    return $this->_lock;   }   public function ClearElixir()   {    global $dbo;    $dbo->ExectueQuery(sprintf('UPDATE `%selixir_e` SET `d` = \'1\' WHERE `tid` = \'%s\' AND `kind` = \'%s\'',     DB_PERFIX,$this->_data['id'],ELIXIR_BAD));      $dbo->ExectueQuery(sprintf('UPDATE `%stroop_b` SET `d` = \'1\' WHERE `tid1` = \'7\' AND `tid2` = \'%s\' AND `d` = \'0\'',     DB_PERFIX, $this->_data['id'], $this->_data['mid']));            $dbo->ExectueQuery(sprintf('UPDATE `%stroop_s` SET `d` = \'1\' WHERE `tid1` = \'7\' AND `tid2` = \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id'], $this->_data['mid']));   }      public function CanClearElixir()      {          global $dbo;          if($dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%selixir_e` WHERE `tid` = \'%s\' AND `modify` > \'%d\' AND `kind` = \'%s\' AND `d` = \'0\'',              DB_PERFIX,$this->_data['id'],$_SERVER['REQUEST_TIME'], ELIXIR_BAD),'c'))              return true;          return false;      }   public function FastBuild()   {    global $dbo;    $dbo->ExectueQuery(sprintf('UPDATE `%sbuilding_q` SET `modify` = \'%s\' WHERE `tid` = \'%s\' AND `d` = \'0\'',     DB_PERFIX, $_SERVER['REQUEST_TIME'], $this->_data['id']));    $dbo->ExectueQuery(sprintf('UPDATE `%sresearch` SET `modify` = \'%s\' WHERE `tid` = \'%s\' AND `kind` != \'%s\'  AND `d` = \'0\'',     DB_PERFIX, $_SERVER['REQUEST_TIME'], $this->_data['id'],RES_PARTY));   }      public function CanFastBuild()      {          global $dbo;          if($dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%sbuilding_q` WHERE `tid` = \'%s\' AND `modify` > \'%d\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id'],$_SERVER['REQUEST_TIME']),'c'))              return true;          if($dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%sresearch` WHERE `tid` = \'%s\' AND  `modify` > \'%d\' AND`kind` != \'%s\' AND `d` = \'0\'',              DB_PERFIX, $this->_data['id'], $_SERVER['REQUEST_TIME'], RES_PARTY),'c'))              return true;          return false;      }   public function GetTroops()   {    global $dbo;    $arr = array(0=>array(0 =>0, 1=>0, 2=>0) , 1 => array(0 =>0, 1=>0,2=>0));          if($this->_dummy)              return array();    $at = array(A_ATTACK,A_BLOCKADE, A_ESPIAL, A_NEW_TOWN, A_RAPINE, A_ADVENTURE, A_TREASURE);    $st = array(A_RETURN, A_SUPPORT);    $sql = $dbo->ExectueQuery(sprintf('SELECT `kind`, COUNT(*) AS `c`, MIN(`modify`) AS `modify` FROM `%stroop_s` WHERE `tid1` = \'%s\' AND `d` = \'0\' GROUP BY `kind`', DB_PERFIX,$this->_data['id']));    while($row = $dbo->Read($sql))    {     if(in_array($row['kind'],$at))     {      $arr[0][0] += $row['c'];      if($arr[1][0])      {       if($arr[1][0] >= $row['modify'])        $arr[1][0] = $row['modify'];        }      else       $arr[1][0] = $row['modify'];     }     if(in_array($row['kind'],$st))     {      $arr[0][1] += $row['c'];      if($arr[1][1])      {       if($arr[1][1] >= $row['modify'])        $arr[1][1] = $row['modify'];        }      else       $arr[1][1] = $row['modify'];     }    }    $dbo->Cancel($sql);    $t = 0;    $sql = $dbo->ExectueQuery(  sprintf('SELECT `kind`, COUNT(*) AS `c`, MIN(`modify`) AS `modify` FROM `%stroop_s` WHERE `tid2` = \'%s\' AND (NOT  (`kind` = \'%s\' OR `kind` = \'%s\') AND (`tid1` != `tid2`)) AND `d` = \'0\' GROUP BY `kind`', DB_PERFIX, $this->_data['id'], A_RETURN, A_ESPIAL));    while($row = $dbo->Read($sql))    {     if(in_array($row['kind'], $at))     {      $arr[0][2] += $row['c'];      if($arr[1][2])      {       if($arr[1][2] >= $row['modify'])        $arr[1][2] = $row['modify'];        }      else       $arr[1][2] = $row['modify'];     }     else     {      $arr[0][1] += $row['c'];      if($arr[1][1])      {       if($arr[1][1] >= $row['modify'])        $arr[1][1] = $row['modify'];        }      else       $arr[1][1] = $row['modify'];     }    }    return (array_sum($arr[0]) ? $arr : array());   }  }  ?>