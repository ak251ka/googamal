<?php  require_once('lib/dbo.php');  require_once('lib/object.php');  require_once('lib/data.php');  require_once('lib/defines.php');  require_once('lib/utility.php');  require_once('eng/sec/session.php');  require_once('lib/utility.php');  require_once('eng/main/town.php');  require_once('eng/main/plus.php');  require_once('eng/main/hero.php');  require_once('eng/main/union.php');  require_once('eng/main/baseUpdate.php');  define('MAX_SITTER','ms');  define('SIITTER_SET','ss');    class Account extends Data  {   protected $_aid;   protected $_towns;   protected $_plus;   protected $_hero;   protected $_del;   protected $_isLock;      protected $_values;   public function __construct($aid)   {       $this->_values = array();    if($aid == 0)    {     $this->_dummy = true;     return;    }    global $dbo;    global $union;    $this->_isLock = false;    $this->_data = $dbo->ExectueRow(sprintf('SELECT * FROM `%saccount` WHERE `id` = \'%s\'',      DB_PERFIX, $aid));    $this->_del = 0;    if($this->IsLoad())    {     $this->_plus = new Plus($this);     $this->_hero = new Hero($this);              $this->_del = $dbo->ExectueScaler(sprintf('SELECT `modify` FROM `%saccount_del` WHERE `pid` = \'%s\'',                  DB_PERFIX, $this->_data['id']),'modify');     if($this->_data['uid'] and !$dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%sunion_b` WHERE `id` = \'%s\'',      DB_PERFIX, $this->_data['uid']),'c'))     {      if($this->Lock())      {       $this->_data['uid'] = '0';       $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `uid` = \'0\' WHERE `id` = \'%s\'',DB_PERFIX, $this->_data['id']));       $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `uid` = \'0\' WHERE `pid` = \'%s\'',DB_PERFIX, $this->_data['id']));       $dbo->ExectueQuery(sprintf('UPDATE `%sclooney` SET `uid` = \'0\' WHERE `pid` = \'%s\'',DB_PERFIX, $this->_data['id']));      }      $this->UnLock();     }    }   }   public function &GetTown($id = 0)   {    if($id == 0)     return $this->GetDefaultTown();    global $dbo;    $row = $dbo->ExectueRow(sprintf('SELECT * FROM `%stown` WHERE `id` = \'%s\' AND `pid` = \'%s\'',      DB_PERFIX, $this->_data['tid'], $this->_data['id']));    if(empty($row))          {              $row = array();              $town = new Town($row,$this);              $town->_dummy = true;              return $town;          }    $town = new Town($row,$this);    return $town;   }   public function &GetPlus()   {    return $this->_plus;   }   public function &GetHero()   {    return $this->_hero;   }   public function &GetDefaultTown()   {    return $this->GetTown($this->_data['tid']);   }   public function CountTown()   {    global $dbo;    return $dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%stown` WHERE `pid` = \'%s\'',     DB_PERFIX, $this->_data['id']),'c');   }   public function UpdateTown($time, $id = 0,$locks = false)   {    global $dbo;    $update = new Updates($this);    if($id)    {     $update->StartUpDate($id, $time, $locks);     return $update->IsUpDated();    }    elseif(!$this->_dummy)    {     $sql = $dbo->ExectueQuery(sprintf('SELECT `id`,`pid` FROM `%stown` WHERE `pid` = \'%s\'',      DB_PERFIX,$this->_data['id']));              $update->StartUpDate($this->_data['tid'], $time, $locks);     while($row = $dbo->Read($sql))              {                  if($row['id'] == $this->_data['tid'])                      continue;                  if(($row['pid'] == $this->_data['id']) and (($_SERVER['REQUEST_TIME'] + MAX_PROCESS_TIME) > time()))                     $update->StartUpDate($row['id'], $time, $locks);              }     $dbo->Cancel($sql);     $this->_hero->UpdateSell($time);     gc_collect_cycles();    }    return true;   }   public function AddMoney($pid,$money)   {    global $dbo;    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `m_b` = `m_b` + \'%s\' WHERE `id` = \'%s\' LIMIT 1;',     DB_PERFIX,$pid,$money));   }   public function HaveTown($id)   {    global $dbo;    return $dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%stown` WHERE `id` = \'%s\' AND `pid` = \'%s\'',     DB_PERFIX, $id, $this->_data['id']),'c');   }   public function SwitchTown($tid)   {    $tid = ValidNumber($tid,true);    if($tid > 0)    {     if($this->HaveTown($tid))     {      $this->_data['tid'] = $tid;      $this->SetFields(array('tid' => $tid));       return true;     }    }    return false;   }   public function IsDeleting()   {    return $this->_del;   }   public function SetUnion($id)   {    global $dbo;    $this->_data['uid'] = $id;    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `uid` = \'%s\' WHERE `id` = \'%s\' LIMIT 1',     DB_PERFIX,$id, $this->_data['id']));    $dbo->ExectueQuery(sprintf('UPDATE `%stown` SET `uid` = \'%s\' WHERE `pid` = \'%s\'',     DB_PERFIX, $id, $this->_data['id']));    $dbo->ExectueQuery(sprintf('UPDATE `%sclooney` SET `uid` = \'%s\' WHERE `pid` = \'%s\'',     DB_PERFIX, $id, $this->_data['id']));   }   public function Lock()   {    if($this->_isLock)     return true;    global $dbo;    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `locks` = \'1\' WHERE `id` = \'%s\' AND `locks` = \'0\' LIMIT 1',     DB_PERFIX, $this->_data['id']));    return $this->_isLock = $dbo->AffectedRows();   }   public function UnLock()   {    if(!$this->_isLock)     return;    global $dbo;    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `locks` = \'0\' WHERE `id` = \'%s\' LIMIT 1',     DB_PERFIX, $this->_data['id']));    $this->_isLock = false;   }   public function IsLock()   {    return $this->_isLock;   }   public function SetField($Fileds)   {    if($this->_dummy)     return;    global $dbo;    return $dbo->UpdateRow(DB_PERFIX.'account',$Fileds, $this->_data['id']);   }   public function SetFields($Fileds)   {    if($this->_dummy or !count($Fileds))     return;    global $dbo;    $set = '';    $b = false;    $arr = array('ap', 'dp', 'cp','pop','talant','money','t_b','m_b','exp');    foreach ($Fileds as $key => $value)    {     if($b)      $set .= ' , ';     else      $b = true;     if(in_array($key, $arr))     {      $set .= '`'.$key.'` = `'.$key.'` + \''.$value.'\'';      $this->_data[$key] += $value;     }     else     {      if(is_null($value))       $set .= '`'.$key.'` = NULL';      else       $set .= '`'.$key.'` = \''.$value.'\'';                  if($key == 'locks')                      $this->_isLock = $value;                  else          $this->_data[$key] = $value;     }    }    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET %s WHERE `id` = \'%s\' LIMIT 1;',DB_PERFIX, $set, $this->_data['id']));    gc_collect_cycles();   }   public function &GetLinks()   {    global $dbo;    $sql = $dbo->ExectueQuery(sprintf('SELECT * FROM `%slinks` WHERE `pid` = \'%s\'', DB_PERFIX,$this->_data['id']));    $list = array();    $i = 0;    while($row = $dbo->Read($sql))     $list[$i++] = new Object($row);    $dbo->Cancel($sql);    gc_collect_cycles();    return $list;   }   public function SetLinks(&$new)   {    global $dbo;    $dbo->ExectueQuery(sprintf('DELETE FROM `%slinks` WHERE `pid` = \'%s\'', DB_PERFIX, $this->_data['id']));    foreach($new as $n)     $dbo->InsertRow(DB_PERFIX.'links',$n);    gc_collect_cycles();   }   public function &GetTownsList()   {    global $dbo;    $list = array();    $i=0;    $sql = $dbo->ExectueQuery(sprintf('SELECT `t`.`id`,`t`.`name`,`t`.`loyalty`,`t`.`cap`,`m`.`x`,`m`.`y` FROM `%stown` AS `t` LEFT JOIN `%smap_t` AS `m` ON (`t`.`mid` = `m`.`id`) WHERE `t`.`pid` = \'%s\' ORDER BY `t`.`id` ASC', DB_PERFIX,DB_PERFIX, $this->_data['id']));    while($row = $dbo->Read($sql))     $list[$i++] = $row;    gc_collect_cycles();    $dbo->Cancel($sql);    return $list;   }   public function AddPop($pop)   {    if($this->_dummy)     return;    global $dbo;    if($this->_data['uid'])    {     $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `pop` = `pop` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $pop,$this->_data['uid'], UNION_KIND));     $dbo->ExectueQuery(sprintf('UPDATE `%sunion_b` SET `pop` = `pop` + \'%d\' WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX, $pop,$this->_data['uid']));    }    $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `pop` = `pop` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $pop, $this->_data['id'], PLAYER_KIND));    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `pop` = `pop` + \'%d\' WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX, $pop, $this->_data['id']));    $this->_data['pop'] = $this->_data['pop'] + $pop;   }   public function AddAP($ap)   {    if($this->_dummy)     return;    global $dbo;    if($this->_data['uid'])    {     $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `ap` = `ap` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $ap,$this->_data['uid'], UNION_KIND));     $dbo->ExectueQuery(sprintf('UPDATE `%sunion_b` SET `ap` = `ap` + \'%d\' WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX, $ap,$this->_data['uid']));     $dbo->ExectueQuery(sprintf('UPDATE `%sunion_m` SET `ap` = `ap` + \'%d\' WHERE `pid` = \'%s\' LIMIT 1',DB_PERFIX, $ap,$this->_data['id']));    }    $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `ap` = `ap` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $ap, $this->_data['id'], PLAYER_KIND));    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `ap` = `ap` + \'%d\' WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX, $ap, $this->_data['id']));    $this->_data['ap'] = $this->_data['ap'] + $ap;   }   public function AddDP($dp)   {    if($this->_dummy)     return;    global $dbo;    if($this->_data['uid'])    {     $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `dp` = `dp` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $dp,$this->_data['uid'], UNION_KIND));     $dbo->ExectueQuery(sprintf('UPDATE `%sunion_b` SET `dp` = `dp` + \'%d\' WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX, $dp,$this->_data['uid']));     $dbo->ExectueQuery(sprintf('UPDATE `%sunion_m` SET `dp` = `dp` + \'%d\' WHERE `pid` = \'%s\' LIMIT 1',DB_PERFIX, $dp,$this->_data['id']));    }    $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `dp` = `dp` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $dp, $this->_data['id'], PLAYER_KIND));    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `dp` = `dp` + \'%d\' WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX, $dp, $this->_data['id']));    $this->_data['dp'] = $this->_data['dp'] + $dp;   }   public function AddHeroPoint($exp)   {    if($this->_dummy)     return;    global $dbo;          $this->_data['exp'] += $exp;    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `exp` = `exp` + \'%s\' WHERE `id` = \'%s\' LIMIT 1',     DB_PERFIX, $exp, $this->_data['id']));   }   public function AddHP($hp)   {    if($this->_dummy)     return;    global $dbo;    if($this->_data['hp9'])     $hp += round($hp * ($this->_data['hp9'] / 100));    $this->_data['exp'] += $hp;    $dbo->ExectueQuery(sprintf('UPDATE `%saccount` SET `exp` = `exp` + \'%s\' WHERE `id` = \'%s\' LIMIT 1',     DB_PERFIX,$hp, $this->_data['id']));   }   public function AddHonor($hp)   {    if($this->_dummy)     return;    global $dbo;    if($this->_data['uid'])     $dbo->ExectueQuery(sprintf('UPDATE `%point` SET `honor` = `honor` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $hp,$this->_data['uid'], UNION_KIND));    $dbo->ExectueQuery(sprintf('UPDATE `%point` SET `honor` = `honor` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $hp, $this->_data['id'], PLAYER_KIND));   }   public function AddPlunder($pl)   {    if($this->_dummy)     return;    global $dbo;    if($this->_data['uid'])     $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `plunder` = `plunder` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $pl,$this->_data['uid'], UNION_KIND));    $dbo->ExectueQuery(sprintf('UPDATE `%spoint` SET `plunder` = `plunder` + \'%d\' WHERE `owner` = \'%s\' AND `kind` = \'%s\' LIMIT 1',       DB_PERFIX, $pl, $this->_data['id'], PLAYER_KIND));   }   public function GetId($name)   {    global $dbo;    return $dbo->ExectueScaler(sprintf('SELECT `id` FROM `%saccount` WHERE `name` = \'%s\' LIMIT 1',DB_PERFIX,$name),'id');   }   public function GetName($id)   {    global $dbo;    return $dbo->ExectueScaler(sprintf('SELECT `name` FROM `%saccount` WHERE `id` = \'%s\' LIMIT 1',DB_PERFIX,$id),'name');   }   public function HaveCP()   {    global $dbo;    $cp = 500;    $t = $dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%stown` WHERE `pid` = \'%s\'',DB_PERFIX,$this->_data['id']),'c');    for($i = 0; $i<$t;$i++)     $cp += round($cp /2,-2 );    $t = $dbo->ExectueScaler(sprintf('SELECT `cp` FROM `%saccount` WHERE `id` = \'%s\'',DB_PERFIX,$this->_data['id']),'cp');    return $t >= $cp;   }      public function NeedCP()      {          global $dbo;          $cp = 500;          $t = $dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%stown` WHERE `pid` = \'%s\'',DB_PERFIX,$this->_data['id']),'c');          for($i = 0; $i<$t;$i++)              $cp += round($cp /2,-2 );          $t = $dbo->ExectueScaler(sprintf('SELECT `cp` FROM `%saccount` WHERE `id` = \'%s\'',DB_PERFIX,$this->_data['id']),'cp');          return  $cp;      }      public function AddValues($value)      {        $arr = array('ap', 'dp', 'cp','pop','talant','money','t_b','m_b','exp');        foreach($value as $k => $v)        {           if(in_array($k,$arr))             $this->_values[$k] += $v;           else             $this->_values[$k] = $v;        }      }      public function SetValues()      {        $this->SetFields($this->_values);        $this->_values = array();      }      public function SetTown($id)      {          if($this->_data['id'] < 8)              return;          if($this->_data['tid'] != $id)              return;            global $dbo;          $newid = $dbo->ExectueScaler(sprintf('SELECT `id` FROM `%stown` WHERE `pid` = \'%s\' AND `id` != \'%s\' LIMIT 1',              DB_PERFIX,$this->_data['id'],$id),'id');          $arr = array('tid' => $newid);          if($this->_data['htid'] == $id)          {              $arr['htid'] = $arr['tid'];              $arr['life'] = '0';          }          $this->SetFields($arr);      }      public function SetSitter($slid, $name, $per = 0)      {          global $session;          $sitter = 'sitter'.$slid;          $setting = 'setting'.$slid;          $this->_data[$slid] = 0;          if(empty($name))          {              $id = $this->_data[$sitter];              $this->SetFields(array($sitter => '0', $setting => '0'));                $session->RemoveAccsess($this->_data['id'],$id);              return CANCEL_SITER;          }          if($this->_data[$sitter])              $session->RemoveAccsess($this->_data['id'], $this->_data[$sitter]);          $id = $this->GetId($name);          $this->SetFields(array($sitter => $id, $setting => $per));          global $dbo;          $c = $dbo->ExectueScaler(sprintf('SELECT COUNT(*) AS `c` FROM `%saccount` WHERE `sitter1` = \'%s\' or `sitter1` = \'%s\'',              DB_PERFIX,$id,$id),'c');          if($c <= 2)              return SET_SITTER;          $this->SetFields(array($sitter => '0',$setting => '0'));          return MAX_SITTER;      }      public function GetBeSitter()      {          global $dbo;          $sql = $dbo->ExectueQuery(sprintf('SELECT `id`,`name`,`sitter1`,`sitter2`,`setting1`,`setting2` FROM `%1$saccount` WHERE (`sitter1` = \'%2$s\' or `sitter2` = \'%2$s\') LIMIT 0, 2',              DB_PERFIX,$this->_data['id']));          $arr = array();          $i = 0;          while($row = $dbo->Read($sql))          {              $arr[$i]['id'] = $row['id'];              $arr[$i]['name'] = $row['name'];              $arr[$i]['setting'] = (($this->_data['id'] == $row['sitter1']) ? $row['setting1'] : $row['setting2']);              $i++;          }          $dbo->Cancel($sql);          return $arr;      }      public function RemoveBeSitter($id)      {          global $dbo;          $row = $dbo->ExectueRow(sprintf('SELECT `sitter1`,`sitter2`,`setting1`,`setting2` FROM `%saccount` WHERE `id` = \'%s\'',DB_PERFIX,$id));          if(empty($row))              return;          $modify = false;          if($row['sitter1'] == $this->_data['id'])          {              if($row['sitter2'])              {                  $row['setting1'] = $row['setting2'];                  $row['sitter1'] = $row['sitter2'];                  $row['setting2'] = $row['sitter2'] = '0';              }              else                  $row['setting1'] = $row['sitter1'] = '0';              $modify = true;          }          if($row['sitter2'] == $this->_data['id'])          {              $row['setting2'] = $row['sitter2'] = '0';              $modify = true;          }          if($modify)              $dbo->UpdateRow(DB_PERFIX.'account',$row,$id);      }      public function Deleting()      {          global $dbo;          $id = $dbo->ExectueScaler(sprintf('SELECT `id` FROM `%saccount_del` WHERE `pid` = \'%s\' LIMIT 1'              ,DB_PERFIX,$this->_data['id']),'id');          if($id)          {              $dbo->DeleteRecord(DB_PERFIX.'account_del',$id);              $this->_del = 0;          }          else          {              $arr = array('pid'=>$this->_data['id'],'modify' =>$_SERVER['REQUEST_TIME'] + (72 * 3600));              $dbo->InsertRow(DB_PERFIX.'account_del', $arr);              $this->_del = $arr['modify'];          }          }      public function Deleted($time)      {          return ($this->_del <= $time);      }      public function GetMedal($id)      {          global $dbo;          global $lang;          $list = array();          $sql = $dbo->ExectueQuery(              sprintf('SELECT * FROM `%smedal` WHERE `owner` =\'%s\' AND `kind` = \'%s\'',                  DB_PERFIX, $id,PLAYER_KIND));          $i = 0;          while($row = $dbo->Read($sql))          {              $list[$i] = new Object($row);              $list[$i]->medal = sprintf('%s_%s_%s', $row['medal'], $row['subkind'], $row['repeats']);              $list[$i]->text = sprintf(                  $lang['MedalText'],$lang['M_'.$row['medal']], $row['subkind'],$lang['M_N_'.$row['medal']],$lang['M_W_'.$row['repeats']],                  $row['point'],$row['week']);              $i++;          }          $dbo->Cancel($sql);          return $list;      }  }  ?>