<?php  require_once('lib/dbo.php');  require_once('lib/object.php');  require_once('lib/utility.php');  require_once('lib/defines.php');  require_once('eng/sec/logManager.php');    class Session extends Object  {   protected $_type;   protected $_time;   protected $_form = array();      public function FirstTime()      {          if($this->GetType() != LOG)              return 0;          global $dbo;          $dbo->ExectueQuery(sprintf(              'INSERT INTO `%1$splus`(`pid`, `kind`, `cost`, `modify`) SELECT * FROM (SELECT \'%2$s\',\'%3$s\',\'1\',\'%4$s\') AS tmp WHERE NOT EXISTS (SELECT * FROM `tsplus` WHERE `pid` = \'%2$s\' AND `kind` = \'%3$s\' AND `modify` = \'%4$s\' ) LIMIT 1;',                  DB_PERFIX,              $this->_data['pid'],              DAY_BONUS,              Today($_SERVER['REQUEST_TIME'])));            return $dbo->AffectedRows();      }   public function __construct()   {    $this->_time = microtime(true);    parent::__construct();    if (!isset($_SESSION))    {     session_cache_expire(60);     session_start();    }    if(date_default_timezone_get() != TIMEZONE)     date_default_timezone_set(TIMEZONE);    gc_enable();    $this->Load();   }   protected function Load()   {    global $dbo;    if(!isset($_SESSION['CODE']))    {     $dbo->ExectueQuery(sprintf('DELETE FROM `%slogtry` WHERE `modify` < \'%s\'',      DB_PERFIX,$_SERVER['REQUEST_TIME']));           $this->_data = $dbo->ExectueRow(sprintf('SELECT * FROM `%slogtry` WHERE `ip` = \'%d\'',      DB_PERFIX, ip2long($_SERVER['REMOTE_ADDR']) ));           if($this->IsLoad())     {      $this->_type = LOG_IN;      $this->_data['tried'] = (empty($_POST) ? $this->_data['tried'] : (int)$this->_data['tried'] + 1);      return;     }     else      $this->_type = UNKNOWN;         }        if(isset($_SESSION['ID_S']))    {     $dbo->ExectueQuery(sprintf('DELETE FROM `%ssession` WHERE `modify` < \'%s\'',      DB_PERFIX, $_SERVER['REQUEST_TIME'] ));          $this->_data = $dbo->ExectueRow(sprintf('SELECT * FROM `%ssession` WHERE `code` = \'%s\' AND `id` = \'%s\'',      DB_PERFIX, $_SESSION['CODE'],$_SESSION['ID_S']));     if($this->IsLoad())     {      $this->_type = LOG;      $this->SaveDummy(true);      return;     }    }    unset($_SESSION['ID_S']);    if(isset($_SESSION['ID_L']))    {     $dbo->ExectueQuery(sprintf('DELETE FROM `%slogtry` WHERE `modify` < \'%s\'',      DB_PERFIX, $_SERVER['REQUEST_TIME']));        $this->_data = $dbo->ExectueRow(sprintf('SELECT * FROM `%slogtry` WHERE `code` = \'%s\' AND `id` = \'%s\'',      DB_PERFIX, $_SESSION['CODE'], $_SESSION['ID_L']));     if($this->IsLoad())     {      $this->_type = LOG_IN;      $this->_data['tried'] = (empty($_POST) ? $this->_data['tried'] : (int)$this->_data['tried'] + 1);     }     return;    }    unset($_SESSION['ID_L']);    $this->_type = UNKNOWN;     }   public function Save()   {    if(!$this->IsLoad() or $this->_type == UNKNOWN)     return;    global $dbo;    if($this->_type == LOG)    {     global $logManager;     if(!$logManager->Load())      $logManager->Create($this->_data['pid'],       $this->_data['pid'] == $this->_data['aid']?'0':'1');     $this->_data['modify'] = $_SERVER['REQUEST_TIME'] + ONE_HOUR;     $dbo->UpdateRow(sprintf('%ssession', DB_PERFIX), $this->_data, $this->_data['id']);     $this->SaveDummy(false);              $logManager->Save();    }    elseif($this->_type == LOG_IN)    {     if($this->_data['tried'] <= LOG_TRY)      $this->_data['modify'] = $_SERVER['REQUEST_TIME'] + ONE_HOUR;     else      $this->_data['tried'] = LOG_TRY;     $dbo->UpdateRow(sprintf('%slogtry', DB_PERFIX), $this->_data, $this->_data['id']);    }   }   public function Close()   {    if(!isset($_SESSION['CODE']))     return;    global $dbo;    if($this->_type == LOG)    {     $dbo->ExectueQuery(sprintf('DELETE FROM `%ssession` WHERE `code` = \'%s\' LIMIT 1',      DB_PERFIX, $_SESSION['CODE']));     unset($_SESSION['ID_S']);     unset($_SESSION['hfa']);     unset($_SESSION['hfb']);     unset($_SESSION['hfc']);     unset($_SESSION['hfd']);     unset($_SESSION['hff']);     unset($_SESSION['hfr']);     unset($_SESSION['hfs']);     unset($_SESSION['hfm']);    }    else    {     $dbo->ExectueQuery(sprintf('DELETE FROM `%slogtry` WHERE `code` = \'%s\' LIMIT 1',      DB_PERFIX, $_SESSION['CODE']));     unset($_SESSION['ID_L']);    }    $this->NewRow();    $this->_type = UNKNOWN;   }   public function NewSession($type = LOG_IN)   {    $this->_data['code'] = $_SESSION['CODE'] = GUID();    global $dbo;    $this->_type = UNKNOWN;    $this->_data['modify'] = $_SERVER['REQUEST_TIME'];    if($type == LOG)    {     $dbo->InsertRow(sprintf('%ssession',DB_PERFIX),$this->_data);     $_SESSION['ID_S'] = $this->_data['id'] = $dbo->InsertedID();     unset($_SESSION['ID_L']);     $this->_type = LOG;    }    elseif($type == LOG_IN)    {     $this->_data['tried'] = '1';     $this->_data['ip'] = ip2long($_SERVER['REMOTE_ADDR']);     unset($_SESSION['cap']);     unset($_SESSION['captcha']);     unset($_SESSION['ID_S']);     $dbo->InsertRow(sprintf('%slogtry',DB_PERFIX),$this->_data);     $_SESSION['ID_L'] = $this->_data['id'] = $dbo->InsertedID();     $this->_type = LOG_IN;    }   }   public function HaveTime()   {    return $this->_time == $_SERVER['REQUEST_TIME'];   }   public function GetType()   {    return $this->_type;   }   public function Permission($per)   {          if($this->_data['pid'] < 4)              return true;    global $dbo;          $account = $permission = (int)$dbo->ExectueScaler(sprintf('SELECT `permission` FROM `%saccount` WHERE `id` = \'%s\' LIMIT 1;',              DB_PERFIX,$this->_data['aid']),'permission');          if($this->_data['aid'] != $this->_data['pid'])          {              $temp = $dbo->ExectueRow(sprintf('SELECT sitter1,sitter2,setting1,setting2 FROM `%saccount` WHERE `id` = \'%s\'',DB_PERFIX,$this->_data['aid']));              if($temp['sitter1'] == $this->_data['pid'])                  $permission = $permission & (int)$temp['setting1'];              if($temp['sitter2'] == $this->_data['pid'])                  $permission = $permission & (int)$temp['setting2'];          }          $result = true;            if(($per & SEND_PM ) == SEND_PM)          {              if(($permission & $per) != SEND_PM)                  $result = false;          }          if(($per & READ_PM ) == READ_PM)          {              if(($permission & $per) != READ_PM)                  $result = false;          }          if(($per & CAN_MARKET ) == CAN_MARKET)          {              if(($permission & $per) != CAN_MARKET)                  $result = false;          }          if(($per & READ_REPORT ) == READ_REPORT)          {              if(($permission & $per) != READ_REPORT)                  $result = false;          }          if(($per & UNION_REPORT ) == UNION_REPORT)          {              if(($permission & $per) != UNION_REPORT)                  $result = false;          }          if(($per & CAN_RAPINE ) == CAN_RAPINE)          {              $per = $per | BAND_TOWN;              if(($permission & $per) != CAN_RAPINE)                  $result = false;          }          if(($per & CAN_ESPIAL ) == CAN_ESPIAL)          {              $per = $per | BAND_TOWN;              if(($permission & $per) != CAN_ESPIAL)                  $result = false;          }          if(($per & CAN_SUPPORT ) == CAN_SUPPORT)          {              $per = $per | BAND_TOWN;              if(($permission & $per) != CAN_SUPPORT)                  $result = false;          }          if(($per & USED_PLUS ) == USED_PLUS)          {              if(($permission & $per) != USED_PLUS)                  $result = false;          }          if(($per & A_ATTACK ) == A_ATTACK)          {              $per = $per | BAND_TOWN;              if($this->_data['pid'] != $this->_data['aid'])                  $result = false;              elseif(($permission & OWNER)  != OWNER)                  $result = false;              elseif(($permission & $per) != SEND_PM)                  $result = false;              elseif(($permission & $per) != A_ATTACK)                  $result = false;          }          if(($per & BAND_TOWN ) == BAND_TOWN)          {              if(($account & $per) == BAND_TOWN)                  $result = false;          }          if(($per & OWNER) == OWNER)          {              if((($permission & OWNER) != OWNER) or ($this->_data['pid'] != $this->_data['aid']))                  $result = false;          }          return $result;   }   public function CheckCaptcha()   {    if( !isset($_SESSION['captcha']) or      !isset($_POST['captcha']) or     $_SESSION['captcha'] != (int)$_POST['captcha'])     return false;    return true;   }   public function Captcha()   {    $arr = array('٠','١','٢','٣','٤','٥','٦','٧','٨','٩','١٠');    $num1 = rand(1,10);    $num2 = rand(1,10);    $op = rand(0,2);    switch($op)    {     case 0 : $_SESSION['captcha'] = $num1 + $num2;      $_SESSION['cap'] = sprintf('%s + %s = ?',$arr[$num1],$arr[$num2]);      break;     case 1 : $_SESSION['captcha'] = $num1 * $num2;      $_SESSION['cap'] = sprintf('%s ٭ %s = ?',$arr[$num1],$arr[$num2]);      break;     case 2 : $_SESSION['captcha'] = (int)abs($num1 - $num2);      $_SESSION['cap'] =  $num1 > $num2 ? sprintf('%s - %s = ?',$arr[$num1],$arr[$num2]):sprintf('%s - %s = ?', $arr[$num2], $arr[$num1]);      break;    }   }   public function ClearCaptcha()   {    unset($_SESSION['cap']);    unset($_SESSION['captcha']);   }   public function FreeMemory()   {    gc_collect_cycles();   }   public function Href($link)   {    if($this->_type == LOG)     $this->Save();    $host  = $_SERVER['HTTP_HOST'];    header("Location: http://$host/$link");    exit;   }   public function FromID()   {       }      public function RemoveAccsess($pid,$sid)      {          global $dbo;          $dbo->ExectueQuery(sprintf('DELETE FROM `%ssession` WHERE `aid` = \'%s\' AND `pid` = \'%s\' LIMIT 1',DB_PERFIX,              $pid, $sid));      }   protected function SaveDummy($start)   {    $fp = fopen($_SERVER['DOCUMENT_ROOT'].'/dummy/'.session_id(),'a+');    $str =  '';    if($start)    {     $str = "\r\n".$_SERVER['REQUEST_URI'].' '.      $_SERVER['REQUEST_TIME'].' '.       $this->_data['aid'].' '.      $this->_data['pid'].' P';     foreach($_POST as $key => $value)      $str .= ' ('.$key.' = '. $value.')';     $str .= ' G';     foreach($_GET as $key => $value)      $str .= ' ('.$key.' = '. $value.')';    }    else    {     $time_end= microtime(true);     $time = $time_end - $this->_time;     $str = sprintf(" (proc = %10.10f)\r\n", $time);    }    fputs($fp,$str);    fclose($fp);   }  }    $session = new Session();  ?>