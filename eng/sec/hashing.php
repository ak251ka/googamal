<?php  class Hashing  {   private $lAlphabet = array('G','C','E','M','A','J','K','P','I','L','O','H','B','F','N','D');   private $rAlphabet = array('E','I','G','N','D','P','K','H','J','O','C','F','M','B','A','L');   protected function IndexOf(&$array, $value)   {    $i = -1;    $find = false;    foreach($array as &$a)    {     $i++;     if($a === $value)     {      $find = true;      break;     }    }    return $find ? $i : -1;   }   protected function Encode($value)   {    $temp = strtoupper(dechex($value));    for($i = 0; $i < strlen($temp); $i++)    {     switch($temp[$i])     {      case '0':       $temp[$i] = 'A';       break;      case '1':       $temp[$i] = 'B';       break;      case '2':       $temp[$i] = 'C';       break;      case '3':       $temp[$i] = 'D';       break;      case '4':       $temp[$i] = 'E';       break;      case '5':       $temp[$i] = 'F';       break;      case '6':       $temp[$i] = 'G';       break;      case '7':       $temp[$i] = 'H';       break;      case '8':       $temp[$i] = 'I';       break;      case '9':       $temp[$i] = 'J';       break;      case 'A':       $temp[$i] = 'K';       break;      case 'B':       $temp[$i] = 'L';       break;      case 'C':       $temp[$i] = 'M';       break;      case 'D':       $temp[$i] = 'N';       break;      case 'E':       $temp[$i] = 'O';       break;      case 'F':       $temp[$i] = 'P';       break;     }    }    return $temp;   }   protected function Decode($value)   {    for($i = 0; $i < strlen($value); $i++)    {     switch($value[$i])     {      case 'A':       $value[$i] = '0';       break;      case 'B':       $value[$i] = '1';       break;      case 'C':       $value[$i] = '2';       break;      case 'D':       $value[$i] = '3';       break;      case 'E':       $value[$i] = '4';       break;      case 'F':       $value[$i] = '5';       break;      case 'G':       $value[$i] = '6';       break;      case 'H':       $value[$i] = '7';       break;      case 'I':       $value[$i] = '8';       break;      case 'J':       $value[$i] = '9';       break;      case 'K':       $value[$i] = 'A';       break;      case 'L':       $value[$i] = 'B';       break;      case 'M':       $value[$i] = 'C';       break;      case 'N':       $value[$i] = 'D';       break;      case 'O':       $value[$i] = 'E';       break;      case 'P':       $value[$i] = 'F';       break;     }    }    return hexdec($value);   }   public function Encrypt($plainText)   {    $left = $this->lAlphabet;    $right = $this->rAlphabet;    $pText = $this->Encode($plainText);    $cText = array();    $temp = array();    $index;    $store;    for($i = 0; $i < strlen($pText); $i++)    {     $index = $this->IndexOf($right, $pText[$i]);     $cText[$i] =$left[$index];     if ($i == strlen($pText)- 1)      break;          for($j = $index; $j < 16; $j++)       $temp[$j - $index] = $left[$j];     for($j = 0; $j < $index; $j++)       $temp[16 - $index + $j] = $left[$j];     $store = $temp[1];     for($j = 2; $j < 9; $j++)       $temp[$j - 1] = $temp[$j];     $temp[8] = $store;     $left = $temp;          for($j = $index; $j < 16; $j++)       $temp[$j - $index] = $right[$j];     for($j = 0; $j < $index; $j++)       $temp[16 - $index + $j] = $right[$j];     $store = $temp[0];     for($j = 1; $j < 16; $j++)       $temp[$j - 1] = $temp[$j];     $temp[15] = $store;     $store = $temp[2];     for($j = 3; $j < 9; $j++)       $temp[$j - 1] = $temp[$j];     $temp[8] = $store;      $right = $temp;    }    gc_collect_cycles();    return implode($cText);   }   public function Decrypt($cipherText)      {    if(strlen(trim($cipherText,'A..P'))> 0)     return 0;         $left = $this->lAlphabet;    $right = $this->rAlphabet;          $cText = $cipherText;       $pText = array();       $temp = array();       $index;       $store;     for($i = 0; $i < strlen($cText); $i++)    {     $index = $this->IndexOf($left, $cText[$i]);     $pText[$i] = $right[$index];     if ($i == strlen($cText) - 1)      break;                for($j = $index; $j < 16; $j++)       $temp[$j - $index] = $left[$j];     for($j = 0; $j < $index; $j++)      $temp[16 - $index + $j] = $left[$j];     $store = $temp[1];     for($j = 2; $j < 9; $j++)      $temp[$j - 1] = $temp[$j];     $temp[8] = $store;     $left = $temp;          for($j = $index; $j < 16; $j++)       $temp[$j - $index] = $right[$j];     for($j = 0; $j < $index; $j++)      $temp[16 - $index + $j] = $right[$j];     $store = $temp[0];     for($j = 1; $j < 16; $j++)      $temp[$j - 1] = $temp[$j];     $temp[15] = $store;     $store = $temp[2];     for($j = 3; $j < 9; $j++)       $temp[$j - 1] = $temp[$j];     $temp[8] = $store;     $right = $temp;    }    gc_collect_cycles();    return $this->Decode(implode($pText));   }  }  $Hasher = new Hashing;  ?>